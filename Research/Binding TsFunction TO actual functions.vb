     Public Shared Sub [Declare](ByVal env As TsEnvironment)
            Dim tsTypeVoid As TScript.TsType = env.[GetType]("void")
            Dim tsTypeInt As TScript.TsType = env.[GetType]("int")
            Dim tsTypeFloat As TScript.TsType = env.[GetType]("float")
            Dim tsTypeBool As TScript.TsType = env.[GetType]("bool")
            Dim tsTypeString As TScript.TsType = env.[GetType]("string")
			
			'TsTypes: 
            Dim tsTypeActor As TScript.TsType = env.DeclareType("Actor")
            Dim tsTypeActorList As TScript.TsType = env.DeclareType("ActorList")
            Dim tsTypeActorReference As TScript.TsType = env.DeclareType("ActorReference")
            Dim tsTypetrigger As TScript.TsType = env.DeclareType("trigger")
            Dim tsTypeProp As TScript.TsType = env.DeclareType("Prop")
            Dim tsTypePoint As TScript.TsType = env.DeclareType("Point")
            Dim tsTypeEvent As TScript.TsType = env.DeclareType("Event")
            Dim tsTypeCustomProperty As TScript.TsType = env.DeclareType("CustomProperty")
            Dim tsTypeRegion As TScript.TsType = env.DeclareType("Region")
            Dim tsTypeCameraRegion As TScript.TsType = env.DeclareType("CameraRegion")
            Dim tsTypeArea As TScript.TsType = env.DeclareType("Area")
            Dim tsTypePatrolRoute As TScript.TsType = env.DeclareType("PatrolRoute")
            Dim tsTypeHPOrAP As TScript.TsType = env.DeclareType("HPOrAP")
            Dim tsTypeInOrOut As TScript.TsType = env.DeclareType("InOrOut")
            Dim tsTypeEnableOrDisable As TScript.TsType = env.DeclareType("EnableOrDisable", tsTypeInt)
            Dim tsTypeIsOrIsNot As TScript.TsType = env.DeclareType("IsOrIsNot", tsTypeInt)
            Dim tsTypeDeathMethod As TScript.TsType = env.DeclareType("DeathMethod", tsTypeInt)
            Dim tsTypeHackIndicatorStatus As TScript.TsType = env.DeclareType("HackIndicatorStatus", tsTypeInt)
            Dim tsTypeActorAreOrAreNot As TScript.TsType = env.DeclareType("AreOrAreNot", tsTypeInt)
            Dim tsTypeActorTurnBasedOrFreeMove As TScript.TsType = env.DeclareType("TurnBasedOrFreeMove", tsTypeInt)
            Dim tsTypeActorHasOrHasNot As TScript.TsType = env.DeclareType("HasOrHasNot", tsTypeInt)
            Dim tsTypeActorBaseOrCurrent As TScript.TsType = env.DeclareType("BaseOrCurrent", tsTypeInt)
            Dim tsTypeActorDeadOrAlive As TScript.TsType = env.DeclareType("DeadOrAlive", tsTypeInt)
            Dim tsTypeActorWaitOrNot As TScript.TsType = env.DeclareType("WaitOrNot", tsTypeInt)
            Dim tsTypeActorWithOrWithout As TScript.TsType = env.DeclareType("WithOrWithout", tsTypeInt)
            Dim tsTypeActorPlayerOrAI As TScript.TsType = env.DeclareType("PlayerOrAI", tsTypeInt)
            Dim tsTypeActorInteractableObject As TScript.TsType = env.DeclareType("InteractableObject", tsTypeProp)
            Dim tsTypeActorGoalStatus As TScript.TsType = env.DeclareType("GoalStatus", tsTypeInt)
            Dim tsTypeActorListActorAttributes As TScript.TsType = env.DeclareType("ActorAttributes", tsTypeInt)
            Dim tsTypeActorListActorSkills As TScript.TsType = env.DeclareType("ActorSkills", tsTypeInt)
            Dim tsTypeActorListActorSpecializations As TScript.TsType = env.DeclareType("ActorSpecializations", tsTypeInt)
            Dim tsTypeActorListPrimaryOrSecondary As TScript.TsType = env.DeclareType("PrimaryOrSecondary", tsTypeInt)
            Dim tsTypeActorListItem As TScript.TsType = env.DeclareType("Item")
            Dim tsTypeActorListConversation As TScript.TsType = env.DeclareType("Conversation")
            Dim tsTypeActorListFactionList As TScript.TsType = env.DeclareType("FactionList", tsTypeString)
            Dim tsTypeActorListThreatType As TScript.TsType = env.DeclareType("ThreatType")
            Dim tsTypeActorListTargetPreference As TScript.TsType = env.DeclareType("TargetPreference")
            Dim tsTypeActorListSenseTagList As TScript.TsType = env.DeclareType("SenseTagList")
            Dim tsTypeActorReferenceGoal As TScript.TsType = env.DeclareType("Goal")
            Dim tsTypeActorReferenceStatusCondition As TScript.TsType = env.DeclareType("StatusCondition")
            Dim tsTypeActorReferenceCoverAmount As TScript.TsType = env.DeclareType("CoverAmount")
            Dim tsTypeActorReferenceRace As TScript.TsType = env.DeclareType("Race")
            Dim tsTypeActorReferenceGender As TScript.TsType = env.DeclareType("Gender")
            Dim tsTypeActorReferenceAllOrAny As TScript.TsType = env.DeclareType("AllOrAny")
            Dim tsTypeActorReferenceEnterOrExit As TScript.TsType = env.DeclareType("EnterOrExit")
            Dim tsTypeActorReferenceAIAttitude As TScript.TsType = env.DeclareType("AIAttitude")
            Dim tsTypeActorReferenceTeamAlliance As TScript.TsType = env.DeclareType("TeamAlliance")
            Dim tsTypeActorReferenceVectorComponent As TScript.TsType = env.DeclareType("VectorComponent")
            Dim tsTypetriggerConsciousness As TScript.TsType = env.DeclareType("Consciousness")
            Dim tsTypetriggerFacingDirection As TScript.TsType = env.DeclareType("FacingDirection")
            Dim tsTypetriggerSound As TScript.TsType = env.DeclareType("Sound")
            Dim tsTypetriggerMusic As TScript.TsType = env.DeclareType("Music")
            Dim tsTypetriggerTextPopupStyle As TScript.TsType = env.DeclareType("TextPopupStyle")
            Dim tsTypetriggerBuffDebuffType As TScript.TsType = env.DeclareType("BuffDebuffType")
            Dim tsTypetriggerSaveGameType As TScript.TsType = env.DeclareType("SaveGameType")
            Dim tsTypetriggerMajorMinorSaveType As TScript.TsType = env.DeclareType("MajorMinorSaveType")
            Dim tsTypetriggerSceneDimension As TScript.TsType = env.DeclareType("SceneDimension")
            Dim tsTypetriggerAnimationState As TScript.TsType = env.DeclareType("AnimationState")
            Dim tsTypePropAnimationModifiers As TScript.TsType = env.DeclareType("AnimationModifiers")
            Dim tsTypePropPreviousStoryVariable As TScript.TsType = env.DeclareType("PreviousStoryVariable")
            Dim tsTypePropAIAttackStyle As TScript.TsType = env.DeclareType("AIAttackStyle")
            Dim tsTypePropTeleportMethod As TScript.TsType = env.DeclareType("TeleportMethod", tsTypeInt)
            Dim tsTypePropRunSpeedMethod As TScript.TsType = env.DeclareType("RunSpeedMethod", tsTypeInt)
            Dim tsTypePropVulnerabilityType As TScript.TsType = env.DeclareType("VulnerabilityType", tsTypeInt)
            Dim tsTypePropEntitlementType As TScript.TsType = env.DeclareType("EntitlementType", tsTypeInt)
			
			'TsPresets
            Dim tsPresetConsciousness As TScript.TsPreset = env.DeclarePreset("Preset Values", "Consciousness", tsTypetriggerConsciousness)
            tsPresetConsciousness.DeclareValue("Unconscious", 0, "Unconscious")
            tsPresetConsciousness.DeclareValue("Conscious", 1, "Conscious")
			
            Dim tsPresetGoalStatus As TScript.TsPreset = env.DeclarePreset("Preset Values", "GoalStatus", tsTypeActorGoalStatus)
            tsPresetGoalStatus.DeclareValue("Hidden", 0, "Hidden")
            tsPresetGoalStatus.DeclareValue("Started", 1, "Started")
            tsPresetGoalStatus.DeclareValue("Success", 2, "Success")
            tsPresetGoalStatus.DeclareValue("Failure", 3, "Failure")
			
            Dim tsPresetEnableOrDisable As TScript.TsPreset = env.DeclarePreset("Preset Values", "EnableOrDisable", tsTypeEnableOrDisable)
            tsPresetEnableOrDisable.DeclareValue("Enable", 0, "Enable")
            tsPresetEnableOrDisable.DeclareValue("Disable", 1, "Disable")
			
            Dim tsPresetBaseOrCurrent As TScript.TsPreset = env.DeclarePreset("Preset Values", "BaseOrCurrent", tsTypeActorBaseOrCurrent)
            tsPresetBaseOrCurrent.DeclareValue("base", 0, "base")
            tsPresetBaseOrCurrent.DeclareValue("current", 1, "current")
			
            Dim tsPresetDeadOrAlive As TScript.TsPreset = env.DeclarePreset("Preset Values", "DeadOrAlive", tsTypeActorDeadOrAlive)
            tsPresetDeadOrAlive.DeclareValue("Dead", 0, "Dead")
            tsPresetDeadOrAlive.DeclareValue("Alive", 1, "Alive")
			
            Dim tsPresetPrimaryOrSecondary As TScript.TsPreset = env.DeclarePreset("Preset Values", "PrimaryOrSecondary", tsTypeActorListPrimaryOrSecondary)
            tsPresetPrimaryOrSecondary.DeclareValue("Primary", 0, "Primary")
            tsPresetPrimaryOrSecondary.DeclareValue("Secondary", 1, "Secondary")
			
            Dim tsPresetHackIndicatorStatus As TScript.TsPreset = env.DeclarePreset("Preset Values", "HackIndicatorStatus", tsTypeHackIndicatorStatus)
            tsPresetHackIndicatorStatus.DeclareValue("hacked", 0, "hacked")
            tsPresetHackIndicatorStatus.DeclareValue("not hacked", 1, "not hacked")
            tsPresetHackIndicatorStatus.DeclareValue("disconnected", 2, "disconnected")
			
            Dim tsPresetAIAttackStyle As TScript.TsPreset = env.DeclarePreset("Preset Values", "AIAttackStyle", tsTypePropAIAttackStyle)
            tsPresetAIAttackStyle.DeclareValue("Best Only", 0, "Best Only")
            tsPresetAIAttackStyle.DeclareValue("All Equal", 1, "All Equal")
            tsPresetAIAttackStyle.DeclareValue("Any NonZero", 2, "Any NonZero")
            tsPresetAIAttackStyle.DeclareValue("Cycle All", 3, "Cycle All")
            tsPresetAIAttackStyle.DeclareValue("Random All", 4, "Random All")
			
            Dim tsPresetActorAttributes As TScript.TsPreset = env.DeclarePreset("Preset Values", "ActorAttributes", tsTypeActorListActorAttributes)
            tsPresetActorAttributes.DeclareValue("Body", 1, "Body")
            tsPresetActorAttributes.DeclareValue("Quickness", 2, "Quickness")
            tsPresetActorAttributes.DeclareValue("Strength", 3, "Strength")
            tsPresetActorAttributes.DeclareValue("Charisma", 4, "Charisma")
            tsPresetActorAttributes.DeclareValue("Intelligence", 5, "Intelligence")
            tsPresetActorAttributes.DeclareValue("Willpower", 6, "Willpower")
            tsPresetActorAttributes.DeclareValue("Essence", 7, "Essence")
            tsPresetActorAttributes.DeclareValue("Magic", 8, "Magic")
            tsPresetActorAttributes.DeclareValue("HP", 11, "HP")
            tsPresetActorAttributes.DeclareValue("AP", 12, "AP")
            tsPresetActorAttributes.DeclareValue("Armor", 13, "Armor")
            tsPresetActorAttributes.DeclareValue("Force", 14, "Force")
            tsPresetActorAttributes.DeclareValue("Move Speed", 15, "Move Speed")
            tsPresetActorAttributes.DeclareValue("Magic Essence", 16, "Magic Essence")
            tsPresetActorAttributes.DeclareValue("Authority", 101, "Authority")
            tsPresetActorAttributes.DeclareValue("Discipline", 102, "Discipline")
            tsPresetActorAttributes.DeclareValue("Morale", 103, "Morale")
            tsPresetActorAttributes.DeclareValue("Awareness", 104, "Awareness")
            tsPresetActorAttributes.DeclareValue("Perception", 105, "Perception")
            tsPresetActorAttributes.DeclareValue("Protect Tether Range", 106, "Protect Tether Range")
            tsPresetActorAttributes.DeclareValue("Fearless", 107, "Fearless")
			
            Dim tsPresetActorSkills As TScript.TsPreset = env.DeclarePreset("Preset Values", "ActorSkills", tsTypeActorListActorSkills)
            tsPresetActorSkills.DeclareValue("Ranged Combat", 1, "Ranged Combat")
            tsPresetActorSkills.DeclareValue("Close Combat", 2, "Close Combat")
            tsPresetActorSkills.DeclareValue("Throwing Weapons", 3, "Throwing Weapons")
            tsPresetActorSkills.DeclareValue("Spellcasting", 4, "Spellcasting")
            tsPresetActorSkills.DeclareValue("Chi Casting", 5, "Chi Casting")
            tsPresetActorSkills.DeclareValue("Decking", 20, "Decking")
            tsPresetActorSkills.DeclareValue("Deck Build/Repair", 21, "Deck Build/Repair")
            tsPresetActorSkills.DeclareValue("Conjuring", 30, "Conjuring")
            tsPresetActorSkills.DeclareValue("Summoning", 31, "Summoning")
            tsPresetActorSkills.DeclareValue("Drain Resistance", 35, "Drain Resistance")
            tsPresetActorSkills.DeclareValue("Drone Control", 50, "Drone Control")
            tsPresetActorSkills.DeclareValue("Biotech", 61, "Biotech")
            tsPresetActorSkills.DeclareValue("Dodge", 62, "Dodge")
            tsPresetActorSkills.DeclareValue("Etiquette: Corporate", 100, "Etiquette: Corporate")
            tsPresetActorSkills.DeclareValue("Etiquette: Security", 101, "Etiquette: Security")
            tsPresetActorSkills.DeclareValue("Etiquette: Gang", 102, "Etiquette: Gang")
            tsPresetActorSkills.DeclareValue("Etiquette: Socialite", 104, "Etiquette: Socialite")
            tsPresetActorSkills.DeclareValue("Etiquette: Shadowrunner", 106, "Etiquette: Shadowrunner")
            tsPresetActorSkills.DeclareValue("Etiquette: Street", 107, "Etiquette: Street")
            tsPresetActorSkills.DeclareValue("Etiquette: Academic", 108, "Etiquette: Academic")
			
            Dim tsPresetActorSpecializations As TScript.TsPreset = env.DeclarePreset("Preset Values", "ActorSpecializations", tsTypeActorListActorSpecializations)
            tsPresetActorSpecializations.DeclareValue("Pistol", 4, "Pistol")
            tsPresetActorSpecializations.DeclareValue("Rifle", 5, "Rifle")
            tsPresetActorSpecializations.DeclareValue("Shotgun", 6, "Shotgun")
            tsPresetActorSpecializations.DeclareValue("SMG", 7, "SMG")
            tsPresetActorSpecializations.DeclareValue("Edged", 21, "Edged")
            tsPresetActorSpecializations.DeclareValue("Unarmed", 23, "Unarmed")
            tsPresetActorSpecializations.DeclareValue("ESP Control", 83, "ESP Control")
            tsPresetActorSpecializations.DeclareValue("Spirit Control", 90, "Spirit Control")
            tsPresetActorSpecializations.DeclareValue("Drone Combat", 100, "Drone Combat")
			
            Dim tsPresetRace As TScript.TsPreset = env.DeclarePreset("Preset Values", "Race", tsTypeActorReferenceRace)
            tsPresetRace.DeclareValue("Human", 0, "Human")
            tsPresetRace.DeclareValue("Dwarf", 1, "Dwarf")
            tsPresetRace.DeclareValue("Elf", 2, "Elf")
            tsPresetRace.DeclareValue("Ork", 3, "Ork")
            tsPresetRace.DeclareValue("Troll", 4, "Troll")
            tsPresetRace.DeclareValue("Dragon", 5, "Dragon")
            tsPresetRace.DeclareValue("Ghoul", 6, "Ghoul")
            tsPresetRace.DeclareValue("Spirit", 7, "Spirit")
            tsPresetRace.DeclareValue("Drone", 8, "Drone")
            tsPresetRace.DeclareValue("Object", 9, "Object")
            tsPresetRace.DeclareValue("Creature", 10, "Creature")
            tsPresetRace.DeclareValue("Free Spirit", 11, "Free Spirit")
            tsPresetRace.DeclareValue("Free Drone", 12, "Free Drone")
			
            Dim tsPresetGender As TScript.TsPreset = env.DeclarePreset("Preset Values", "Gender", tsTypeActorReferenceGender)
            tsPresetGender.DeclareValue("None", 0, "None")
            tsPresetGender.DeclareValue("Male", 1, "Male")
            tsPresetGender.DeclareValue("Female", 2, "Female")
			
            Dim tsPresetThreatType As TScript.TsPreset = env.DeclarePreset("Preset Values", "ThreatType", tsTypeActorListThreatType)
            tsPresetThreatType.DeclareValue("ThreatType-Enemy", 0, "ThreatType-Enemy")
            tsPresetThreatType.DeclareValue("ThreatType-Friendly", 1, "ThreatType-Friendly")
            tsPresetThreatType.DeclareValue("ThreatType-Neutral", 2, "ThreatType-Neutral")
            tsPresetThreatType.DeclareValue("ThreatType-Visible|Enemy", 3, "ThreatType-Visible|Enemy")
            tsPresetThreatType.DeclareValue("ThreatType-Visible|Friendly", 4, "ThreatType-Visible|Friendly")
            tsPresetThreatType.DeclareValue("ThreatType-Visible|Neutral", 5, "ThreatType-Visible|Neutral")
			
            Dim tsPresetHPOrAP As TScript.TsPreset = env.DeclarePreset("Preset Values", "HPOrAP", tsTypeHPOrAP)
            tsPresetHPOrAP.DeclareValue("HP", 0, "HP")
            tsPresetHPOrAP.DeclareValue("AP", 1, "AP")
			
            Dim tsPresetInOrOut As TScript.TsPreset = env.DeclarePreset("Preset Values", "InOrOut", tsTypeInOrOut)
            tsPresetInOrOut.DeclareValue("In", 0, "In")
            tsPresetInOrOut.DeclareValue("Out", 1, "Out")
			
            Dim tsPresetTargetPreference As TScript.TsPreset = env.DeclarePreset("Preset Values", "TargetPreference", tsTypeActorListTargetPreference)
            tsPresetTargetPreference.DeclareValue("Closest", 0, "Closest")
            tsPresetTargetPreference.DeclareValue("Optimum Range", 1, "Optimum Range")
            tsPresetTargetPreference.DeclareValue("Most Dangerous", 2, "Most Dangerous")
            tsPresetTargetPreference.DeclareValue("Most Wounded", 3, "Most Wounded")
            tsPresetTargetPreference.DeclareValue("Least Wounded", 4, "Least Wounded")
            tsPresetTargetPreference.DeclareValue("Jacked Decker", 5, "Jacked Decker")
            tsPresetTargetPreference.DeclareValue("Mage", 6, "Mage")
            tsPresetTargetPreference.DeclareValue("Shaman", 7, "Shaman")
			
            Dim tsPresetbool As TScript.TsPreset = env.DeclarePreset("Preset Values", "bool", tsTypeBool)
            tsPresetbool.DeclareValue("false", False, "false")
            tsPresetbool.DeclareValue("true", True, "true")
			
            Dim tsPresetAIAttitude As TScript.TsPreset = env.DeclarePreset("Preset Values", "AIAttitude", tsTypeActorReferenceAIAttitude)
            tsPresetAIAttitude.DeclareValue("Cautious", 1, "Cautious")
            tsPresetAIAttitude.DeclareValue("Aggressive", 2, "Aggressive")
            tsPresetAIAttitude.DeclareValue("Boss", 3, "Boss")
			
            Dim tsPresetIsOrIsNot As TScript.TsPreset = env.DeclarePreset("Preset Values", "IsOrIsNot", tsTypeIsOrIsNot)
            tsPresetIsOrIsNot.DeclareValue("is not", 0, "is not")
            tsPresetIsOrIsNot.DeclareValue("is", 1, "is")
			
            Dim tsPresetAreOrAreNot As TScript.TsPreset = env.DeclarePreset("Preset Values", "AreOrAreNot", tsTypeActorAreOrAreNot)
            tsPresetAreOrAreNot.DeclareValue("are not", 0, "are not")
            tsPresetAreOrAreNot.DeclareValue("are", 1, "are")
			
            Dim tsPresetHasOrHasNot As TScript.TsPreset = env.DeclarePreset("Preset Values", "HasOrHasNot", tsTypeActorHasOrHasNot)
            tsPresetHasOrHasNot.DeclareValue("does not have", 0, "does not have")
            tsPresetHasOrHasNot.DeclareValue("has", 1, "has")
			
            Dim tsPresetDeathMethod As TScript.TsPreset = env.DeclarePreset("Preset Values", "DeathMethod", tsTypeDeathMethod)
            tsPresetDeathMethod.DeclareValue("Default", 0, "Default")
            tsPresetDeathMethod.DeclareValue("Downed", 1, "Downed")
            tsPresetDeathMethod.DeclareValue("Permanently Dead", 2, "Permanently Dead")
            tsPresetDeathMethod.DeclareValue("Vanish", 3, "Vanish")
			
            Dim tsPresetTurnBasedOrFreeMove As TScript.TsPreset = env.DeclarePreset("Preset Values", "TurnBasedOrFreeMove", tsTypeActorTurnBasedOrFreeMove)
            tsPresetTurnBasedOrFreeMove.DeclareValue("Turn-Based", 0, "Turn-Based")
            tsPresetTurnBasedOrFreeMove.DeclareValue("Freemove", 1, "Freemove")
			
            Dim tsPresetAllOrAny As TScript.TsPreset = env.DeclarePreset("Preset Values", "AllOrAny", tsTypeActorReferenceAllOrAny)
            tsPresetAllOrAny.DeclareValue("All", 0, "All")
            tsPresetAllOrAny.DeclareValue("Any", 1, "Any")
			
            Dim tsPresetWaitOrNot As TScript.TsPreset = env.DeclarePreset("Preset Values", "WaitOrNot", tsTypeActorWaitOrNot)
            tsPresetWaitOrNot.DeclareValue("don't wait", 0, "don't wait")
            tsPresetWaitOrNot.DeclareValue("wait", 1, "wait")
			
            Dim tsPresetEnterOrExit As TScript.TsPreset = env.DeclarePreset("Preset Values", "EnterOrExit", tsTypeActorReferenceEnterOrExit)
            tsPresetEnterOrExit.DeclareValue("Enter", 0, "Enter")
            tsPresetEnterOrExit.DeclareValue("Exit", 1, "Exit")
			
            Dim tsPresetWithOrWithout As TScript.TsPreset = env.DeclarePreset("Preset Values", "WithOrWithout", tsTypeActorWithOrWithout)
            tsPresetWithOrWithout.DeclareValue("without", 0, "without")
            tsPresetWithOrWithout.DeclareValue("with", 1, "with")
			
            Dim tsPresetPlayerOrAI As TScript.TsPreset = env.DeclarePreset("Preset Values", "PlayerOrAI", tsTypeActorPlayerOrAI)
            tsPresetPlayerOrAI.DeclareValue("Player", 0, "Player")
            tsPresetPlayerOrAI.DeclareValue("AI", 1, "AI")
			
            Dim tsPresetTeamAlliance As TScript.TsPreset = env.DeclarePreset("Preset Values", "TeamAlliance", tsTypeActorReferenceTeamAlliance)
            tsPresetTeamAlliance.DeclareValue("Neutral", 0, "Neutral")
            tsPresetTeamAlliance.DeclareValue("Enemy", 1, "Enemy")
			
            Dim tsPresetStatusCondition As TScript.TsPreset = env.DeclarePreset("Preset Values", "StatusCondition", tsTypeActorReferenceStatusCondition)
            tsPresetStatusCondition.DeclareValue("Blind", 1, "Blind")
            tsPresetStatusCondition.DeclareValue("Deaf", 2, "Deaf")
            tsPresetStatusCondition.DeclareValue("Rooted", 3, "Rooted")
            tsPresetStatusCondition.DeclareValue("Silence", 4, "Silence")
            tsPresetStatusCondition.DeclareValue("Disarmed", 5, "Disarmed")
            tsPresetStatusCondition.DeclareValue("Petrified", 6, "Petrified")
            tsPresetStatusCondition.DeclareValue("Confused", 7, "Confused")
            tsPresetStatusCondition.DeclareValue("Mind Wiped", 8, "Mind Wiped")
            tsPresetStatusCondition.DeclareValue("Invisible", 9, "Invisible")
            tsPresetStatusCondition.DeclareValue("Half Visibility", 10, "Half Visibility")
            tsPresetStatusCondition.DeclareValue("Dispelled", 11, "Dispelled")
            tsPresetStatusCondition.DeclareValue("Paralyzed", 12, "Paralyzed")
            tsPresetStatusCondition.DeclareValue("Killing Hands", 13, "Killing Hands")
            tsPresetStatusCondition.DeclareValue("Mage Aura", 14, "Mage Aura")
            tsPresetStatusCondition.DeclareValue("Light Cover", 50, "Light Cover")
            tsPresetStatusCondition.DeclareValue("Medium Cover", 51, "Medium Cover")
            tsPresetStatusCondition.DeclareValue("Heavy Cover", 52, "Heavy Cover")
            tsPresetStatusCondition.DeclareValue("Magic Cover Light", 53, "Magic Cover Light")
            tsPresetStatusCondition.DeclareValue("Magic Cover Medium", 54, "Magic Cover Medium")
            tsPresetStatusCondition.DeclareValue("Magic Cover Heavy", 55, "Magic Cover Heavy")
            tsPresetStatusCondition.DeclareValue("Mage Enhancement: Light", 60, "Mage Enhancement: Light")
            tsPresetStatusCondition.DeclareValue("Mage Enhancement: Medium", 61, "Mage Enhancement: Medium")
            tsPresetStatusCondition.DeclareValue("Mage Enhancement: Heavy", 62, "Mage Enhancement: Heavy")
			
            Dim tsPresetFacingDirection As TScript.TsPreset = env.DeclarePreset("Preset Values", "FacingDirection", tsTypetriggerFacingDirection)
            tsPresetFacingDirection.DeclareValue("No Facing", -1, "No Facing")
            tsPresetFacingDirection.DeclareValue("North", 6, "North")
            tsPresetFacingDirection.DeclareValue("North East", 7, "North East")
            tsPresetFacingDirection.DeclareValue("East", 0, "East")
            tsPresetFacingDirection.DeclareValue("South East", 1, "South East")
            tsPresetFacingDirection.DeclareValue("South", 2, "South")
            tsPresetFacingDirection.DeclareValue("South West", 3, "South West")
            tsPresetFacingDirection.DeclareValue("West", 4, "West")
            tsPresetFacingDirection.DeclareValue("North West", 5, "North West")
			
            Dim tsPresetCoverAmount As TScript.TsPreset = env.DeclarePreset("Preset Values", "CoverAmount", tsTypeActorReferenceCoverAmount)
            tsPresetCoverAmount.DeclareValue("None", 0, "None")
            tsPresetCoverAmount.DeclareValue("Light", 1, "Light")
            tsPresetCoverAmount.DeclareValue("Medium", 2, "Medium")
            tsPresetCoverAmount.DeclareValue("Heavy", 3, "Heavy")
			
            Dim tsPresetVectorComponent As TScript.TsPreset = env.DeclarePreset("Preset Values", "VectorComponent", tsTypeActorReferenceVectorComponent)
            tsPresetVectorComponent.DeclareValue("X", 0, "X")
            tsPresetVectorComponent.DeclareValue("Y", 1, "Y")
            tsPresetVectorComponent.DeclareValue("Z", 2, "Z")
			
            Dim tsPresetEnvironmentalEffects As TScript.TsPreset = env.DeclarePreset("Preset Values", "EnvironmentalEffects", tsTypeString)
            tsPresetEnvironmentalEffects.DeclareValue("rain", "Weather_Rain", "rain")
            tsPresetEnvironmentalEffects.DeclareValue("fog", "Weather_Fog", "fog")
            tsPresetEnvironmentalEffects.DeclareValue("lowClouds", "Weather_LowClouds", "lowClouds")
			
            Dim tsPresetTextPopupStyle As TScript.TsPreset = env.DeclarePreset("Preset Values", "TextPopupStyle", tsTypetriggerTextPopupStyle)
            tsPresetTextPopupStyle.DeclareValue("Speech Bubble", 0, "Speech Bubble")
            tsPresetTextPopupStyle.DeclareValue("GM Text", 1, "GM Text")
            tsPresetTextPopupStyle.DeclareValue("Action Text", 2, "Action Text")
			
            Dim tsPresetBuffDebuffType As TScript.TsPreset = env.DeclarePreset("Preset Values", "BuffDebuffType", tsTypetriggerBuffDebuffType)
            tsPresetBuffDebuffType.DeclareValue("Innate", 0, "Innate")
            tsPresetBuffDebuffType.DeclareValue("Buff", 1, "Buff")
            tsPresetBuffDebuffType.DeclareValue("Debuff", 2, "Debuff")
			
            Dim tsPresetSaveGameType As TScript.TsPreset = env.DeclarePreset("Preset Values", "SaveGameType", tsTypetriggerSaveGameType)
            tsPresetSaveGameType.DeclareValue("Manual", 0, "Manual")
            tsPresetSaveGameType.DeclareValue("Auto", 1, "Auto")
			
            Dim tsPresetMajorMinorSaveType As TScript.TsPreset = env.DeclarePreset("Preset Values", "MajorMinorSaveType", tsTypetriggerMajorMinorSaveType)
            tsPresetMajorMinorSaveType.DeclareValue("Major", 0, "Major")
            tsPresetMajorMinorSaveType.DeclareValue("Minor", 1, "Minor")
			
            Dim tsPresetAnimationState As TScript.TsPreset = env.DeclarePreset("Preset Values", "AnimationState", tsTypetriggerAnimationState)
            tsPresetAnimationState.DeclareValue("idle alert", "idle_alert", "idle alert")
            tsPresetAnimationState.DeclareValue("idle calm", "idle_calm", "idle calm")
            tsPresetAnimationState.DeclareValue("idle cower", "idle_cower", "idle cower")
			
            Dim tsPresetTeleportMethod As TScript.TsPreset = env.DeclarePreset("Preset Values", "TeleportMethod", tsTypePropTeleportMethod)
            tsPresetTeleportMethod.DeclareValue("Warp Teleport", 0, "Warp Teleport")
            tsPresetTeleportMethod.DeclareValue("Warp FAST", 1, "Warp FAST")
            tsPresetTeleportMethod.DeclareValue("Warp MEDIUM", 2, "Warp MEDIUM")
            tsPresetTeleportMethod.DeclareValue("Warp SLOW", 3, "Warp SLOW")
			
            Dim tsPresetRunSpeedMethod As TScript.TsPreset = env.DeclarePreset("Preset Values", "RunSpeedMethod", tsTypePropRunSpeedMethod)
            tsPresetRunSpeedMethod.DeclareValue("Teleport Speed", 0, "Teleport Speed")
            tsPresetRunSpeedMethod.DeclareValue("Sprint Speed", 1, "Sprint Speed")
            tsPresetRunSpeedMethod.DeclareValue("Normal Speed", 2, "Normal Speed")
            tsPresetRunSpeedMethod.DeclareValue("Walk Speed", 3, "Walk Speed")
            tsPresetRunSpeedMethod.DeclareValue("Super Speed", 4, "Super Speed")
            tsPresetRunSpeedMethod.DeclareValue("Default", 5, "Default")
			
            Dim tsPresetVulnerabilityType As TScript.TsPreset = env.DeclarePreset("Preset Values", "VulnerabilityType", tsTypePropVulnerabilityType)
            tsPresetVulnerabilityType.DeclareValue("Normal", 0, "Normal")
            tsPresetVulnerabilityType.DeclareValue("Magic", 1, "Magic")
            tsPresetVulnerabilityType.DeclareValue("Repair", 2, "Repair")
            tsPresetVulnerabilityType.DeclareValue("Heal", 3, "Heal")
            tsPresetVulnerabilityType.DeclareValue("Insecticide", 4, "Insecticide")
            tsPresetVulnerabilityType.DeclareValue("Fire", 5, "Fire")
            tsPresetVulnerabilityType.DeclareValue("Death", 6, "Death")
            tsPresetVulnerabilityType.DeclareValue("Buff", 7, "Buff")
            tsPresetVulnerabilityType.DeclareValue("Debuff", 8, "Debuff")
            tsPresetVulnerabilityType.DeclareValue("Stun", 9, "Stun")
            tsPresetVulnerabilityType.DeclareValue("Crit", 10, "Crit")
            tsPresetVulnerabilityType.DeclareValue("PermaDeath", 11, "PermaDeath")
			
            Dim tsPresetEntitlementType As TScript.TsPreset = env.DeclarePreset("Entitlement Values", "EntitlementType", tsTypePropEntitlementType)
            tsPresetEntitlementType.DeclareValue("EarlyAccess", 0, "EarlyAccess")
            tsPresetEntitlementType.DeclareValue("DocWagon", 1, "DocWagon")
            tsPresetEntitlementType.DeclareValue("Special", 2, "Special")
            tsPresetEntitlementType.DeclareValue("Level", 3, "Level")
            tsPresetEntitlementType.DeclareValue("ID", 4, "ID")
			
            Dim preset As TScript.TsPreset = env.GetPreset("Arithmetic Ops")
            Dim preset1 As TScript.TsPreset = env.GetPreset("Comparison Ops")
			
			
            Dim tsOp As TScript.TsOp
			tsOp = env.DeclareOp("ConditionFunction", "No Condition", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.NoConditionFunction))
            tsOp = env.DeclareOp("ConditionFunction", "AND", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ConditionAndCondition))
            tsOp.DeclareInput("cond1", tsTypeBool)
            tsOp.DeclareInput("cond2", tsTypeBool)
            tsOp = env.DeclareOp("ConditionFunction", "OR", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ConditionOrCondition))
            tsOp.DeclareInput("cond1", tsTypeBool)
            tsOp.DeclareInput("cond2", tsTypeBool)
			
            tsOp = env.DeclareOp("ConditionFunction", "Comparison (Actor)", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorComparison))
            tsOp.DeclareInput("actorA", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp.DeclareInput("actorB", tsTypeActor)
			
            tsOp = env.DeclareOp("ConditionFunction", "Compare Actor Team", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorTeamComparison))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp.DeclareInput("team", tsTypeActorListFactionList)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
			
            tsOp = env.DeclareOp("ConditionFunction", "Compare Actor Race", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorRaceComparison))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp.DeclareInput("team", tsTypeActorReferenceRace)
			
            tsOp = env.DeclareOp("ConditionFunction", "Compare Actor Gender", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorGenderComparison))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp.DeclareInput("team", tsTypeActorReferenceGender)
			
			
			
			
			
			
            tsOp = env.DeclareOp("DataFunctions", "Compare Actor Attribute", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.CompareActorAttribute))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("baseorcurrent", tsTypeActorBaseOrCurrent)
            tsOp.DeclareInput("attribute", tsTypeActorListActorAttributes)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("b", tsTypeInt)
			
            tsOp = env.DeclareOp("DataFunctions", "Compare Actor Skill", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.CompareActorSkill))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("baseorcurrent", tsTypeActorBaseOrCurrent)
            tsOp.DeclareInput("attribute", tsTypeActorListActorSkills)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("b", tsTypeInt)
			
            tsOp = env.DeclareOp("DataFunctions", "Compare Actor Specialization", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.CompareActorSpecialization))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("baseorcurrent", tsTypeActorBaseOrCurrent)
            tsOp.DeclareInput("attribute", tsTypeActorListActorSpecializations)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("b", tsTypeInt)
			
            tsOp = env.DeclareOp("ConditionFunction", "Compare Hire-able Actor Skill", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateHireableActorSkill))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("skill", tsTypeActorListActorSkills)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("value", tsTypeInt)
			
            tsOp = env.DeclareOp("ConditionFunction", "Compare Hire-able Actor Attribute", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateHireableActorAttribute))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("attribute", tsTypeActorListActorAttributes)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("value", tsTypeInt)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Actor Consciousness", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorConsciousness))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("isVal", tsTypeIsOrIsNot)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Actor Cover", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorCover))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("isVal", tsTypeIsOrIsNot)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Cover Between Actors", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateCoverBetweenActors))
            tsOp.DeclareInput("baseActor", tsTypeActor)
            tsOp.DeclareInput("comparison", preset1)
            tsOp.DeclareInput("coverAmount", tsTypeActorReferenceCoverAmount)
            tsOp.DeclareInput("targetActor", tsTypeActorList)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Actor ThreatType to Actor", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorThreatTypeToActor))
            tsOp.DeclareInput("targetActor", tsTypeActorList)
            tsOp.DeclareInput("isVal", tsTypeIsOrIsNot)
            tsOp.DeclareInput("threat", tsTypeActorListThreatType)
            tsOp.DeclareInput("baseActor", tsTypeActor)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Team Survival Percentage", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateTeamPercentage))
            tsOp.DeclareInput("comparison", preset1)
            tsOp.DeclareInput("val", tsTypeInt)
            tsOp.DeclareInput("team", tsTypeActorListFactionList)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Tag for Actor", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateSenseTagForActor))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("comp", tsTypeActorHasOrHasNot)
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Tag for Prop", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateSenseTagForProp))
            tsOp.DeclareInput("prop", tsTypeProp)
            tsOp.DeclareInput("comp", tsTypeActorHasOrHasNot)
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate If Actor Has Item", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorItem))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("comp", tsTypeActorHasOrHasNot)
            tsOp.DeclareInput("itemName", tsTypeActorListItem)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate If Team Has Cyberdeck", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateTeamCyberdeck))
            tsOp.DeclareInput("team", tsTypeActorListFactionList)
            tsOp.DeclareInput("comp", tsTypeActorHasOrHasNot)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate If Actor is Inside Region", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorInsideRegion))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("comp", tsTypeActorAreOrAreNot)
            tsOp.DeclareInput("regionName", tsTypeRegion)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Turn Mode", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateTurnMode))
            tsOp.DeclareInput("turnmode", tsTypeActorTurnBasedOrFreeMove)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Alarm State", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateAlarmState))
            tsOp.DeclareInput("alarmState", tsTypeIsOrIsNot)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Goal", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateGoal))
            tsOp.DeclareInput("goalName", tsTypeActorReferenceGoal)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp.DeclareInput("goalStatus", tsTypeActorGoalStatus)
			
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Nuyen", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateNuyen))
            tsOp.DeclareInput("comparison", preset1)
            tsOp.DeclareInput("val", tsTypeInt)
			
            tsOp = env.DeclareOp("ConditionFunction", "Goal Is Primary", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GoalIsPrimary))
            tsOp.DeclareInput("goalName", tsTypeActorReferenceGoal)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
			
            tsOp = env.DeclareOp("ConditionFunction", "Actor Has Status Condition", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorHasStatusCondition))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("hashasnot", tsTypeActorHasOrHasNot)
            tsOp.DeclareInput("cond", tsTypeActorReferenceStatusCondition)
			
            tsOp = env.DeclareOp("ConditionFunction", "Actor Has Run Speed", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorHasRunSpeed))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("hashasnot", tsTypeActorHasOrHasNot)
            tsOp.DeclareInput("runspeed", tsTypePropRunSpeedMethod)
			
            tsOp = env.DeclareOp("EffectFunctions", "No Effect", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.NoEffectFunction))
			
            tsOp = env.DeclareOp("EffectFunctions", "Retain Trigger", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.DEPRECATEDRetainTriggerFunction))
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Retain Trigger", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetRetainTrigger))
            tsOp.DeclareInput("enables", tsTypeBool)
			
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Trigger", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetTriggerEnabled))
            tsOp.DeclareInput("enables", tsTypeEnableOrDisable)
            tsOp.DeclareInput("triggerVal", tsTypetrigger)
			
            tsOp = env.DeclareOp("EffectFunctions", "Trigger: Wait Until Triggered Again", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.TriggerWaitUntilTriggeredAgain))
			
            tsOp = env.DeclareOp("EffectFunctions", "Trigger: Wait for Event", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.TriggerWaitForEvent))
            tsOp.DeclareInput("event", tsTypeEvent)
			
            tsOp = env.DeclareOp("EffectFunctions", "Trigger: Wait for Rounds", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.TriggerWaitForRounds))
            tsOp.DeclareInput("rounds", tsTypeInt)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
			
            tsOp = env.DeclareOp("EffectFunctions", "Trigger: Run Alternate Trigger", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.TriggerRunAlternateTrigger))
            tsOp.DeclareInput("triggerVal", tsTypetrigger)
            tsOp.DeclareInput("withwithout", tsTypeActorWithOrWithout)
            tsOp.DeclareInput("waitornot", tsTypeActorWaitOrNot)
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Region Enabled", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetRegionEnabled))
            tsOp.DeclareInput("enables", tsTypeEnableOrDisable)
            tsOp.DeclareInput("regionName", tsTypeRegion)
			
            tsOp = env.DeclareOp("EffectFunctions", "Open Named Scene", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenNamedScene))
            tsOp.DeclareInput("sceneName", tsTypeString)
			
            tsOp = env.DeclareOp("EffectFunctions", "Open Scene", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenNamedScene))
            tsOp.DeclareInput("sceneName", tsTypeString)
			
            tsOp = env.DeclareOp("EffectFunctions", "Open Starting Scene", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenStartScene))
			
            tsOp = env.DeclareOp("EffectFunctions", "End Story With Epilogue", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EndStoryWithEpilogue))
            tsOp.DeclareInput("epilogue", tsTypeString)
			
            tsOp = env.DeclareOp("EffectFunctions", "Send Event", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SendUserEvent))
            tsOp.DeclareInput("event", tsTypeEvent)
			
            tsOp = env.DeclareOp("EffectFunctions", "Send Event After Delay", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SendUserEventAfterDelay))
            tsOp.DeclareInput("event", tsTypeEvent)
            tsOp.DeclareInput("delay", tsTypeFloat)
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Alarm State", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetAlarmState))
            tsOp.DeclareInput("state", tsTypeBool)
			
            tsOp = env.DeclareOp("EffectFunctions", "Modify Dimension Heat", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ModifyDimensionHeat))			
            tsOp.DeclareInput("dimension", tsTypetriggerSceneDimension)
            tsOp.DeclareInput("amount", tsTypeFloat)
			
            tsOp = env.DeclareOp("EffectFunctions", "Add Tag to Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddSenseTagToActor))
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("actor", tsTypeActorList)
			
            tsOp = env.DeclareOp("EffectFunctions", "Remove Tag from Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveSenseTagFromActor))
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("actor", tsTypeActorList)
			
            tsOp = env.DeclareOp("EffectFunctions", "Add Tag to Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddSenseTagToProp))
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("actor", tsTypeActor)
			
            tsOp = env.DeclareOp("EffectFunctions", "Remove Tag from Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveSenseTagFromProp))
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("actor", tsTypeActor)
			
            tsOp = env.DeclareOp("EffectFunctions", "Add Item to Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddItemToActor))
            tsOp.DeclareInput("itemName", tsTypeActorListItem)
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("notify", tsTypeActorWithOrWithout)
			
            tsOp = env.DeclareOp("EffectFunctions", "Add Item to Team", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddItemToTeam))
            tsOp.DeclareInput("itemName", tsTypeActorListItem)
            tsOp.DeclareInput("targetTeam", tsTypeActorListFactionList)
            tsOp.DeclareInput("notify", tsTypeActorWithOrWithout)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
			
            tsOp = env.DeclareOp("EffectFunctions", "Add Item to Stash", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddItemToStash))
            tsOp.DeclareInput("itemName", tsTypeActorListItem)
            tsOp.DeclareInput("notify", tsTypeActorWithOrWithout)
			
            tsOp = env.DeclareOp("EffectFunctions", "Remove Item from Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveItemFromActor))
            tsOp.DeclareInput("itemName", tsTypeActorListItem)
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("notify", tsTypeActorWithOrWithout)
			
            tsOp = env.DeclareOp("EffectFunctions", "Remove Item from Team", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveItemFromTeam))
            tsOp.DeclareInput("itemName", tsTypeActorListItem)
            tsOp.DeclareInput("targetTeam", tsTypeActorListFactionList)
            tsOp.DeclareInput("notify", tsTypeActorWithOrWithout)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
			
            tsOp = env.DeclareOp("EffectFunctions", "Remove Item from Stash", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveItemFromStash))
            tsOp.DeclareInput("itemName", tsTypeActorListItem)
            tsOp.DeclareInput("notify", tsTypeActorWithOrWithout)
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Item AI priority weight", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetAIItemPriorityWeight))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("itemName", tsTypeActorListItem)
            tsOp.DeclareInput("weight", tsTypeInt)
			
            tsOp = env.DeclareOp("EffectFunctions", "Show Help Screen Popup", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ShowHelpScreenPopup))
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Goal Status", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetGoalStatus))
            tsOp.DeclareInput("goalName", tsTypeActorReferenceGoal)
            tsOp.DeclareInput("goalStatus", tsTypeActorGoalStatus)
			
            tsOp = env.DeclareOp("EffectFunctions", "Add Nuyen", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddNuyen))
            tsOp.DeclareInput("amount", tsTypeInt)
			
            tsOp = env.DeclareOp("EffectFunctions", "Remove Nuyen", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveNuyen))
            tsOp.DeclareInput("amount", tsTypeInt)			
			
            tsOp = env.DeclareOp("EffectFunctions", "Force-Use Interactable Object (Basic)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ForceUseInteractableBasic))
			
            tsOp.DeclareInput("objectName", tsTypeActorInteractableObject)
            tsOp = env.DeclareOp("EffectFunctions", "Force-Use Interactable Object (with Actor)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ForceUseInteractableActor))
            tsOp.DeclareInput("objectName", tsTypeActorInteractableObject)
            tsOp.DeclareInput("actor", tsTypeActor)
			
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Interactable Object", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetInteractableObject))
            tsOp.DeclareInput("enables", tsTypeEnableOrDisable)
            tsOp.DeclareInput("objectName", tsTypeActorInteractableObject)
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Hack Status On Matrix Node Object", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetHackedStatusOnInteractableObject))
            tsOp.DeclareInput("hacked", tsTypeHackIndicatorStatus)
            tsOp.DeclareInput("objectName", tsTypeActorInteractableObject)
			
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Hack Indicator On Matrix Node Object", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetHackIndicatorOnInteractableObject))
            tsOp.DeclareInput("enables", tsTypeEnableOrDisable)
            tsOp.DeclareInput("objectName", tsTypeActorInteractableObject)
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Variable (int)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetVariableInt))
            tsOp.DeclareInput("intVar", tsTypeCustomProperty)
            tsOp.DeclareInput("val", tsTypeInt)
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Variable (bool)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetVariableBool))
            tsOp.DeclareInput("boolVar", tsTypeCustomProperty)
            tsOp.DeclareInput("val", tsTypeInt)
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Variable (float)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetVariableFloat))
            tsOp.DeclareInput("floatVar", tsTypeCustomProperty)
            tsOp.DeclareInput("val", tsTypeInt)
			
            tsOp = env.DeclareOp("EffectFunctions", "Set Variable (string)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetVariableString))
            tsOp.DeclareInput("stringVar", tsTypeCustomProperty)
            tsOp.DeclareInput("val", tsTypeInt)
            tsOp = env.DeclareOp("Math", "Add To Variable (int)", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddToInt))
            tsOp.DeclareInput("a", tsTypeCustomProperty)
            tsOp.DeclareInput("b", tsTypeInt)
            tsOp = env.DeclareOp("Math", "Add To Variable (float)", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddToFloat))
            tsOp.DeclareInput("a", tsTypeCustomProperty)
            tsOp.DeclareInput("b", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Attach Region to Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AttachRegionToActor))
            tsOp.DeclareInput("regionName", tsTypeRegion)
            tsOp.DeclareInput("actorName", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Detach Region", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.DetachRegion))
            tsOp.DeclareInput("regionName", tsTypeRegion)
            tsOp = env.DeclareOp("EffectFunctions", "Adjust Region Size", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AdjustRegionSize))
            tsOp.DeclareInput("regionName", tsTypeRegion)
            tsOp.DeclareInput("width", tsTypeInt)
            tsOp.DeclareInput("depth", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Move Region to Point", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.MoveRegionToPoint))
            tsOp.DeclareInput("regionName", tsTypeRegion)
            tsOp.DeclareInput("destination", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Change Actor Team", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ChangeActorTeam))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActorListFactionList)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("EffectFunctions", "Change Actor Attack Style", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ChangeActorAttackStyle))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypePropAIAttackStyle)
            tsOp = env.DeclareOp("EffectFunctions", "Change Actor Control", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ChangeActorControl))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("playerai", tsTypeActorPlayerOrAI)
            tsOp = env.DeclareOp("EffectFunctions", "Set Team Alliance", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetTeamAlliance))
            tsOp.DeclareInput("baseTeam", tsTypeActorListFactionList)
            tsOp.DeclareInput("affiliation", tsTypeActorReferenceTeamAlliance)
            tsOp.DeclareInput("targetTeam", tsTypeActorListFactionList)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("EffectFunctions", "Attack Actor With Weapon", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AttackActorWithWeapon))
            tsOp.DeclareInput("attacker", tsTypeActorList)
            tsOp.DeclareInput("target", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Reload Weapon", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorReloadWeapon))
            tsOp.DeclareInput("attacker", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Enter/Exit Cover", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorEnterExitCover))
            tsOp.DeclareInput("attacker", tsTypeActorList)
            tsOp.DeclareInput("enterexit", tsTypeActorReferenceEnterOrExit)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Patrol", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToPatrol))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypePatrolRoute)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Face Direction", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToFaceDirection))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("facing", tsTypetriggerFacingDirection)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Point)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToPoint))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypePoint)
            tsOp.DeclareInput("facing", tsTypetriggerFacingDirection)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Actor)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToActor))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActor)
            tsOp.DeclareInput("facing", tsTypetriggerFacingDirection)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Prop)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToProp))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeProp)
            tsOp.DeclareInput("facing", tsTypetriggerFacingDirection)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Region)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToRegion))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeRegion)
            tsOp.DeclareInput("facing", tsTypetriggerFacingDirection)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (ThreatType)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToThreatType))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActorListThreatType)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Start Position)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToStartPosition))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("facing", tsTypetriggerFacingDirection)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Behavior", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSetBehavior))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("behavior", tsTypeActorReferenceAIAttitude)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Point)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectPoint))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Actor)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectActor))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Prop)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectProp))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeProp)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Team)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectTeam))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActorListFactionList)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Region)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectRegion))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeRegion)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (ThreatType)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectThreatType))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActorListThreatType)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Seek And Destroy (Team)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSeekAndDestroyTeam))
            tsOp.DeclareInput("actorName", tsTypeActor)
            tsOp.DeclareInput("orderTarget", tsTypeActorListFactionList)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Seek And Destroy (ThreatType)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSeekAndDestroyThreatType))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActorListThreatType)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Hunt And Destroy (Team)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToHuntAndDestroyTeam))
            tsOp.DeclareInput("actorName", tsTypeActor)
            tsOp.DeclareInput("orderTarget", tsTypeActorListFactionList)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Hunt And Destroy (ThreatType)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToHuntAndDestroyThreatType))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActorListThreatType)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to become a Non-Combatant", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToNonCombatant))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Set Target Preference", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSetTargetPreference))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActorListTargetPreference)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Set Priority Target", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSetPriorityTarget))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Clear ThreatList", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToClearThreatList))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Interact with Object", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToInteractWithObject))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("orderTarget", tsTypeActorInteractableObject)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Communicate", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToCommunicate))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp.DeclareInput("text", tsTypeString)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Call for help", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToCallForHelp))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Flee", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToFlee))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Actor Orders", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ClearActorOrders))
            tsOp.DeclareInput("actorName", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Set Waypoint on Point", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetWaypointPoint))
            tsOp.DeclareInput("style", tsTypeActorListPrimaryOrSecondary)
            tsOp.DeclareInput("target", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Waypoint from Point", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ClearWaypointPoint))
            tsOp.DeclareInput("target", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Set Waypoint on Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetWaypointActor))
            tsOp.DeclareInput("style", tsTypeActorListPrimaryOrSecondary)
            tsOp.DeclareInput("target", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Waypoint from Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ClearWaypointActor))
            tsOp.DeclareInput("target", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Set Waypoint on Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetWaypointProp))
            tsOp.DeclareInput("style", tsTypeActorListPrimaryOrSecondary)
            tsOp.DeclareInput("target", tsTypeProp)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Waypoint from Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ClearWaypointProp))
            tsOp.DeclareInput("target", tsTypeProp)
            tsOp = env.DeclareOp("EffectFunctions", "Clear All Waypoints", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ClearAllWaypoints))
            tsOp = env.DeclareOp("EffectFunctions", "Display Text over Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.DisplayTextOverActor))
            tsOp.DeclareInput("target", tsTypeActor)
            tsOp.DeclareInput("style", tsTypetriggerTextPopupStyle)
            tsOp.DeclareInput("text", tsTypeString)
            tsOp.DeclareInput("r", tsTypeFloat)
            tsOp.DeclareInput("g", tsTypeFloat)
            tsOp.DeclareInput("b", tsTypeFloat)
            tsOp.DeclareInput("a", tsTypeFloat)
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp.DeclareInput("fadeTime", tsTypeFloat)
            tsOp.DeclareInput("delayTime", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Display Text over Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.DisplayTextOverProp))
            tsOp.DeclareInput("target", tsTypeProp)
            tsOp.DeclareInput("style", tsTypetriggerTextPopupStyle)
            tsOp.DeclareInput("text", tsTypeString)
            tsOp.DeclareInput("r", tsTypeFloat)
            tsOp.DeclareInput("g", tsTypeFloat)
            tsOp.DeclareInput("b", tsTypeFloat)
            tsOp.DeclareInput("a", tsTypeFloat)
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp.DeclareInput("fadeTime", tsTypeFloat)
            tsOp.DeclareInput("delayTime", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Display Text over Point", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.DisplayTextOverPoint))
            tsOp.DeclareInput("target", tsTypePoint)
            tsOp.DeclareInput("style", tsTypetriggerTextPopupStyle)
            tsOp.DeclareInput("text", tsTypeString)
            tsOp.DeclareInput("r", tsTypeFloat)
            tsOp.DeclareInput("g", tsTypeFloat)
            tsOp.DeclareInput("b", tsTypeFloat)
            tsOp.DeclareInput("a", tsTypeFloat)
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp.DeclareInput("fadeTime", tsTypeFloat)
            tsOp.DeclareInput("delayTime", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Display Text at Screen Position", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.DisplayTextAtScreenPoint))
            tsOp.DeclareInput("style", tsTypetriggerTextPopupStyle)
            tsOp.DeclareInput("text", tsTypeString)
            tsOp.DeclareInput("x", tsTypeFloat)
            tsOp.DeclareInput("y", tsTypeFloat)
            tsOp.DeclareInput("r", tsTypeFloat)
            tsOp.DeclareInput("g", tsTypeFloat)
            tsOp.DeclareInput("b", tsTypeFloat)
            tsOp.DeclareInput("a", tsTypeFloat)
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp.DeclareInput("fadeTime", tsTypeFloat)
            tsOp.DeclareInput("delayTime", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Play Animation", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorPlayAnimation))
            tsOp.DeclareInput("target", tsTypeActor)
            tsOp.DeclareInput("text", tsTypeString)
            tsOp = env.DeclareOp("EffectFunctions", "Set Animation State Of Actor To Animation Modifier", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActorSetAnimationStateToAnimationModifier))
            tsOp.DeclareInput("animState", tsTypetriggerAnimationState)
            tsOp.DeclareInput("target", tsTypeActor)
            tsOp.DeclareInput("animMod", tsTypePropAnimationModifiers)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Camera Shake", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ApplyCameraShake))
            tsOp.DeclareInput("intensity", tsTypeFloat)
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Teleport Camera To Point", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.TeleportCameraToPosition))
            tsOp.DeclareInput("point", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Teleport Camera To Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.TeleportCameraToPlayer))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Fade Camera Out", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.FadeCameraOut))
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp.DeclareInput("delay", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Fade Camera In", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.FadeCameraIn))
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp.DeclareInput("delay", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Add Camera Point of Interest (Actors)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddCameraPointOfInterestActors))
            tsOp.DeclareInput("target", tsTypeActorList)
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Add Camera Point of Interest (Point)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddCameraPointOfInterestPoint))
            tsOp.DeclareInput("target", tsTypePoint)
            tsOp.DeclareInput("time", tsTypeFloat)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Camera Point of Interest (Actors)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveCameraPointOfInterestActors))
            tsOp.DeclareInput("target", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Camera Point of Interest (Point)", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveCameraPointOfInterestPoint))
            tsOp.DeclareInput("target", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Camera Points of Interest", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ClearCameraPointsOfInterest))
            tsOp = env.DeclareOp("EffectFunctions", "Spawn Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SpawnProp))
            tsOp.DeclareInput("prop", tsTypeProp)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Clone Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.CloneProp))
            tsOp.DeclareInput("prop", tsTypeProp)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Delete Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.DeleteProp))
            tsOp.DeclareInput("prop", tsTypeProp)
            tsOp = env.DeclareOp("EffectFunctions", "Move Prop", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.MoveProp))
            tsOp.DeclareInput("prop", tsTypeProp)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Activate Actor Spawner", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ActivateActorSpawner))
            tsOp.DeclareInput("unspawnedActor", tsTypeActorReference)
            tsOp = env.DeclareOp("EffectFunctions", "Spawn Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SpawnActor))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Clone Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.CloneActor))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Kill Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.KillActor))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("method", tsTypeDeathMethod)
            tsOp = env.DeclareOp("EffectFunctions", "Teleport Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.TeleportActor))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp.DeclareInput("facing", tsTypetriggerFacingDirection)
            tsOp.DeclareInput("method", tsTypePropTeleportMethod)
            tsOp = env.DeclareOp("EffectFunctions", "Teleport Actor near Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.TelportActorNearActor))
            tsOp.DeclareInput("actor0", tsTypeActorList)
            tsOp.DeclareInput("radius", tsTypeInt)
            tsOp.DeclareInput("actor1", tsTypeActor)
            tsOp.DeclareInput("facing", tsTypetriggerFacingDirection)
            tsOp.DeclareInput("method", tsTypePropTeleportMethod)
            tsOp = env.DeclareOp("EffectFunctions", "Play FX at Point", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.PlayFXAtPoint))
            tsOp.DeclareInput("scriptName", tsTypeString)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Remove FX at Point", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveFXAtPoint))
            tsOp.DeclareInput("scriptName", tsTypeString)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Play FX on Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.PlayFXOnActor))
            tsOp.DeclareInput("scriptName", tsTypeString)
            tsOp.DeclareInput("target", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Remove FX From Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveFXFromActor))
            tsOp.DeclareInput("scriptName", tsTypeString)
            tsOp.DeclareInput("target", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Play FX at Point With Target Point", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.PlayFXAtPointWithTargetPoint))
            tsOp.DeclareInput("scriptName", tsTypeString)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp.DeclareInput("target", tsTypePoint)
            tsOp = env.DeclareOp("EffectFunctions", "Play FX at Point With Target Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.PlayFXAtPointWithTargetActor))
            tsOp.DeclareInput("scriptName", tsTypeString)
            tsOp.DeclareInput("pos", tsTypePoint)
            tsOp.DeclareInput("target", tsTypeActorList)
            tsOp = env.DeclareOp("EffectFunctions", "Cause Damage", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.CauseDamage))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("damage", tsTypeInt)
            tsOp.DeclareInput("hporap", tsTypeHPOrAP)
            tsOp = env.DeclareOp("EffectFunctions", "Cause Damage Over Time", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.CauseDamageOverTime))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("damage", tsTypeInt)
            tsOp.DeclareInput("hporap", tsTypeHPOrAP)
            tsOp.DeclareInput("rounds", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Heal Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.HealActor))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("damage", tsTypeInt)
            tsOp.DeclareInput("hporap", tsTypeHPOrAP)
            tsOp = env.DeclareOp("EffectFunctions", "Heal Actor Over Time", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.HealActorOverTime))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("damage", tsTypeInt)
            tsOp.DeclareInput("hporap", tsTypeHPOrAP)
            tsOp.DeclareInput("rounds", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Run Speed", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorRunSpeed))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("method", tsTypePropRunSpeedMethod)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Wander Range", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorWanderRange))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor In Passive Mode", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorPassiveMove))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Ignored by Camera", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorCameraIgnore))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Uninjurable", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorInjurability))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Unkillable", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorKillability))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Vulnerability", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorVulnerability))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp.DeclareInput("vuln", tsTypePropVulnerabilityType)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Condition Status Effect to Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ApplyConditionStatusEffect))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("cond", tsTypeActorReferenceStatusCondition)
            tsOp.DeclareInput("effectName", tsTypeString)
            tsOp.DeclareInput("buffType", tsTypetriggerBuffDebuffType)
            tsOp.DeclareInput("rounds", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Attribute Status Effect to Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ApplyAttributeStatusEffect))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp.DeclareInput("cond", tsTypeActorListActorAttributes)
            tsOp.DeclareInput("effectName", tsTypeString)
            tsOp.DeclareInput("buffType", tsTypetriggerBuffDebuffType)
            tsOp.DeclareInput("rounds", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Skill Status Effect to Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ApplySkillStatusEffect))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp.DeclareInput("cond", tsTypeActorListActorSkills)
            tsOp.DeclareInput("effectName", tsTypeString)
            tsOp.DeclareInput("buffType", tsTypetriggerBuffDebuffType)
            tsOp.DeclareInput("rounds", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Specialization Status Effect to Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.ApplySpecializationStatusEffect))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp.DeclareInput("cond", tsTypeActorListActorSpecializations)
            tsOp.DeclareInput("effectName", tsTypeString)
            tsOp.DeclareInput("buffType", tsTypetriggerBuffDebuffType)
            tsOp.DeclareInput("rounds", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Status Effect from Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.RemoveStatusEffect))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("effectName", tsTypeString)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Base Attribute", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorBaseAttribute))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp.DeclareInput("stat", tsTypeActorListActorAttributes)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Base Skill", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorBaseSkill))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp.DeclareInput("stat", tsTypeActorListActorSkills)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Base Specialization", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetActorBaseSpecialization))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp.DeclareInput("stat", tsTypeActorListActorSpecializations)
            tsOp = env.DeclareOp("EffectFunctions", "Add Actor Karma", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AddActorKarma))
            tsOp.DeclareInput("actors", tsTypeActorList)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp = env.DeclareOp("EffectFunctions", "Start Conversation", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.StartConversation))
            tsOp.DeclareInput("conversationName", tsTypeActorListConversation)
            tsOp.DeclareInput("target", tsTypeActor)
            tsOp.DeclareInput("turnToFace", tsTypeActorWithOrWithout)
            tsOp = env.DeclareOp("EffectFunctions", "Start Conversation Between Actors", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.StartConversationBetweenActors))
            tsOp.DeclareInput("conversationName", tsTypeActorListConversation)
            tsOp.DeclareInput("player", tsTypeActor)
            tsOp.DeclareInput("target", tsTypeActor)
            tsOp.DeclareInput("turnToFace", tsTypeActorWithOrWithout)
            tsOp = env.DeclareOp("EffectFunctions", "Assign Conversation to Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.AssignConversationToActor))
            tsOp.DeclareInput("conversationName", tsTypeActorListConversation)
            tsOp.DeclareInput("player", tsTypeActor)
            tsOp.DeclareInput("withwithout", tsTypeActorWithOrWithout)
            tsOp.DeclareInput("enabled", tsTypeEnableOrDisable)
            tsOp = env.DeclareOp("EffectFunctions", "End Current Actor Turn", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EndCurrentActorTurn))
            tsOp = env.DeclareOp("EffectFunctions", "End Current Team Round", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EndCurrentTeamRound))
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Manual Turn Mode", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetManualTurnMode))
            tsOp.DeclareInput("enable", tsTypeEnableOrDisable)
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Team's Turn", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.EnableDisableTeamTurn))
            tsOp.DeclareInput("team", tsTypeActorListFactionList)
            tsOp.DeclareInput("enable", tsTypeEnableOrDisable)
            tsOp.DeclareInput("dimension", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("EffectFunctions", "Suspend Team's Turn", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SuspendTeamTurn))
            tsOp.DeclareInput("team", tsTypeActorListFactionList)
            tsOp.DeclareInput("rounds", tsTypeInt)
            tsOp.DeclareInput("dimension", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("EffectFunctions", "Play Sound", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.PlaySound))
            tsOp.DeclareInput("soundName", tsTypetriggerSound)
            tsOp.DeclareInput("volume", tsTypeFloat)
            tsOp.DeclareInput("looping", tsTypeBool)
            tsOp = env.DeclareOp("EffectFunctions", "Play Music", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.PlayMusic))
            tsOp.DeclareInput("musicName", tsTypetriggerMusic)
            tsOp.DeclareInput("volume", tsTypeFloat)
            tsOp.DeclareInput("looping", tsTypeBool)
            tsOp = env.DeclareOp("EffectFunctions", "Stop Sound", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.StopSound))
            tsOp.DeclareInput("soundName", tsTypetriggerSound)
            tsOp = env.DeclareOp("EffectFunctions", "Stop Music", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.StopMusic))
            tsOp = env.DeclareOp("EffectFunctions", "Open Character Creation Screen", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenCharacterCreationScreen))
            tsOp = env.DeclareOp("EffectFunctions", "Open Hiring Screen", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenHiringScreen))
            tsOp = env.DeclareOp("EffectFunctions", "Open Hiring Screen and Open Scene", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenHiringScreenAndOpenScene))
            tsOp.DeclareInput("sceneName", tsTypeString)
            tsOp.DeclareInput("confirmationText", tsTypeString)
            tsOp = env.DeclareOp("EffectFunctions", "Open Equip Screen", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenEquipScreen))
            tsOp = env.DeclareOp("EffectFunctions", "Open Store Screen From Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenStoreScreen))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Open Cyberware Screen From Actor", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenCyberwareScreen))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("EffectFunctions", "Save Game", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenSaveScreen))
            tsOp.DeclareInput("manualSaveType", tsTypetriggerSaveGameType)
            tsOp.DeclareInput("majorSaveType", tsTypetriggerMajorMinorSaveType)
            tsOp = env.DeclareOp("EffectFunctions", "Load Game", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.OpenLoadScreen))
            tsOp = env.DeclareOp("EffectFunctions", "Set Ambient Light Color", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetAmbientLightColor))
            tsOp.DeclareInput("r", tsTypeFloat)
            tsOp.DeclareInput("g", tsTypeFloat)
            tsOp.DeclareInput("b", tsTypeFloat)
            tsOp.DeclareInput("a", tsTypeFloat)
            tsOp.DeclareInput("seconds", tsTypeFloat)
            tsOp.DeclareInput("region", tsTypeCameraRegion)
            tsOp = env.DeclareOp("EffectFunctions", "Set Directional Light Color", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetDirectionalLightColor))
            tsOp.DeclareInput("r", tsTypeFloat)
            tsOp.DeclareInput("g", tsTypeFloat)
            tsOp.DeclareInput("b", tsTypeFloat)
            tsOp.DeclareInput("a", tsTypeFloat)
            tsOp.DeclareInput("x", tsTypeFloat)
            tsOp.DeclareInput("y", tsTypeFloat)
            tsOp.DeclareInput("z", tsTypeFloat)
            tsOp.DeclareInput("seconds", tsTypeFloat)
            tsOp.DeclareInput("region", tsTypeCameraRegion)
            tsOp = env.DeclareOp("EffectFunctions", "Set Environmental Effect Amount", tsTypeVoid, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.SetEnvironmentEffectAmount))
            tsOp.DeclareInput("fxName", tsTypeString)
            tsOp.DeclareInput("amount", tsTypeInt)
            tsOp = env.DeclareOp("DataFunctions", "Current General Round", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetCurrentGeneralRound))
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("DataFunctions", "Current Battle Round", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetCurrentBattleRound))
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("DataFunctions", "Active Alarm Count", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActiveAlarmCount))
            tsOp = env.DeclareOp("DataFunctions", "Trigger Execution Count", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggerExecutionCount))
            tsOp.DeclareInput("triggerVal", tsTypetrigger)
            tsOp = env.DeclareOp("DataFunctions", "Get Region Enabled", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetRegionEnabled))
            tsOp.DeclareInput("regionName", tsTypeRegion)
            tsOp = env.DeclareOp("DataFunctions", "Prop Can Be Interacted With", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPropInteractionEnabled))
            tsOp.DeclareInput("object", tsTypeActorInteractableObject)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp = env.DeclareOp("DataFunctions", "Get Percentage of Team Living or Dead", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTeamLivingPercentage))
            tsOp.DeclareInput("team", tsTypeActorListFactionList)
            tsOp.DeclareInput("deadoralive", tsTypeActorDeadOrAlive)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor Health Percentage", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorHealthPercentage))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Actor is Player Controlled", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorPlayerControlled))
            tsOp.DeclareInput("actor", tsTypeActorList)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp = env.DeclareOp("DataFunctions", "Ammo for Weapon", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetAmmoForWeapon))
            tsOp.DeclareInput("baseorcurrent", tsTypeActorBaseOrCurrent)
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Ammo Percentage for Weapon", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetAmmoPercentage))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor Attribute", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorAttribute))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("baseorcurrent", tsTypeActorBaseOrCurrent)
            tsOp.DeclareInput("attribute", tsTypeActorListActorAttributes)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor Skill", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorSkill))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("baseorcurrent", tsTypeActorBaseOrCurrent)
            tsOp.DeclareInput("skill", tsTypeActorListActorSkills)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor Specialization", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorSpecialization))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("baseorcurrent", tsTypeActorBaseOrCurrent)
            tsOp.DeclareInput("spec", tsTypeActorListActorSpecializations)
            tsOp = env.DeclareOp("DataFunctions", "Get Random Actor on Team", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetRandomActorOnTeam))
            tsOp.DeclareInput("team", tsTypeActorListFactionList)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor's Persona", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorAvatar))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Get Persona's Host", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorHost))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Actor is a Persona", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.IsActorAvatar))
            tsOp.DeclareInput("Actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp = env.DeclareOp("DataFunctions", "Actor is Jacked in", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.IsActorDecking))
            tsOp.DeclareInput("Actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp = env.DeclareOp("DataFunctions", "Actor is Jacked in to Matrix Dimension", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.IsActorDeckingInDimension))
            tsOp.DeclareInput("Actor", tsTypeActor)
            tsOp.DeclareInput("isisnot", tsTypeIsOrIsNot)
            tsOp.DeclareInput("dimension", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("DataFunctions", "Get Random Actor within Area", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetRandomActorInArea))
            tsOp.DeclareInput("area", tsTypeArea)
            tsOp = env.DeclareOp("DataFunctions", "Get Random ThreatType of Actor within Area", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetRandomThreatTypeOfActorInArea))
            tsOp.DeclareInput("threat", tsTypeActorListThreatType)
            tsOp.DeclareInput("baseActor", tsTypeActor)
            tsOp.DeclareInput("area", tsTypeArea)
            tsOp = env.DeclareOp("DataFunctions", "Active Actor", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActiveActor))
            tsOp = env.DeclareOp("DataFunctions", "Last Attacker of Actor", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetLastAttackerOfActor))
            tsOp.DeclareInput("baseActor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor ID", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorID))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor From ID", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorFromID))
            tsOp.DeclareInput("id", tsTypeString)
            tsOp = env.DeclareOp("DataFunctions", "Triggering Actor", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringActor))
            tsOp = env.DeclareOp("DataFunctions", "Triggering Target Actor", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringTargetActor))
            tsOp = env.DeclareOp("DataFunctions", "Triggering Prop", tsTypeProp, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringProp))
            tsOp = env.DeclareOp("DataFunctions", "Triggering Target Prop", tsTypeProp, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringTargetProp))
            tsOp = env.DeclareOp("DataFunctions", "Last Created Prop", tsTypeProp, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetLastCreatedProp))
            tsOp = env.DeclareOp("DataFunctions", "Last Created Actor", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetLastCreatedActor))
            tsOp = env.DeclareOp("DataFunctions", "Last Created Persona", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetLastCreatedAvatar))
            tsOp = env.DeclareOp("DataFunctions", "Actor's Current Target", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorCurrentTarget))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Player Team", tsTypeActorListFactionList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPlayerTeam))
            tsOp = env.DeclareOp("DataFunctions", "Active Team", tsTypeActorListFactionList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActiveTeam))
            tsOp = env.DeclareOp("DataFunctions", "Team of Actor", tsTypeActorListFactionList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTeamOfActor))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Triggering Region", tsTypeRegion, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringRegion))
            tsOp = env.DeclareOp("DataFunctions", "Current Location of Actor", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetLocationOfActor))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Current Location of Prop", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetLocationOfProp))
            tsOp.DeclareInput("prop", tsTypeProp)
            tsOp = env.DeclareOp("DataFunctions", "Arithmetic (Point)", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.PointArithmetic))
            tsOp.DeclareInput("p0", tsTypePoint)
            tsOp.DeclareInput("op", preset)
            tsOp.DeclareInput("p1", tsTypePoint)
            tsOp = env.DeclareOp("DataFunctions", "Point Component (int)", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPointComponentInt))
            tsOp.DeclareInput("p0", tsTypePoint)
            tsOp.DeclareInput("op", tsTypeActorReferenceVectorComponent)
            tsOp = env.DeclareOp("DataFunctions", "Point Component (float)", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPointComponentFloat))
            tsOp.DeclareInput("p0", tsTypePoint)
            tsOp.DeclareInput("op", tsTypeActorReferenceVectorComponent)
            tsOp = env.DeclareOp("DataFunctions", "Specified Point (3D)", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetSpecifiedPoint3D))
            tsOp.DeclareInput("xVal", tsTypeFloat)
            tsOp.DeclareInput("yVal", tsTypeFloat)
            tsOp.DeclareInput("zVal", tsTypeFloat)
            tsOp = env.DeclareOp("DataFunctions", "Specified Point (2D)", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetSpecifiedPoint2D))
            tsOp.DeclareInput("xVal", tsTypeFloat)
            tsOp.DeclareInput("zVal", tsTypeFloat)
            tsOp = env.DeclareOp("DataFunctions", "Get Offset Point", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetOffsetPoint))
            tsOp.DeclareInput("basePoint", tsTypePoint)
            tsOp.DeclareInput("offsetPoint", tsTypePoint)
            tsOp = env.DeclareOp("DataFunctions", "Center of Region", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetCenterOfRegion))
            tsOp.DeclareInput("regionName", tsTypeRegion)
            tsOp = env.DeclareOp("DataFunctions", "Get Random Point Within Region", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetRandomPointInRegion))
            tsOp.DeclareInput("regionName", tsTypeRegion)
            tsOp = env.DeclareOp("DataFunctions", "Get Point Within Region Toward Direction", tsTypePoint, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPointInRegionTowardDirection))
            tsOp.DeclareInput("regionName", tsTypeRegion)
            tsOp.DeclareInput("regionDirection", tsTypetriggerFacingDirection)
            tsOp = env.DeclareOp("DataFunctions", "Nearest Tagged Actor to Actor", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetNearestTaggedActorToActor))
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Nearest Tagged Actor to Prop", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetNearestTaggedActorToProp))
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("prop", tsTypeProp)
            tsOp = env.DeclareOp("DataFunctions", "Nearest Tagged Prop to Actor", tsTypeProp, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetNearestTaggedPropToActor))
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp = env.DeclareOp("DataFunctions", "Nearest Tagged Prop to Prop", tsTypeProp, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetNearestTaggedPropToProp))
            tsOp.DeclareInput("tagName", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("prop", tsTypeProp)
            tsOp = env.DeclareOp("DataFunctions", "Area: Entire Map", tsTypeArea, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetAreaEntireMap))
            tsOp = env.DeclareOp("DataFunctions", "Area: Region", tsTypeArea, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetAreaForRegion))
            tsOp.DeclareInput("region", tsTypeRegion)
            tsOp = env.DeclareOp("DataFunctions", "Area: Radius Arount Point", tsTypeArea, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetAreaRadiusAroundPoint))
            tsOp.DeclareInput("radius", tsTypeInt)
            tsOp.DeclareInput("point", tsTypePoint)
            tsOp = env.DeclareOp("DataFunctions", "All Actors", tsTypeActorList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListAllActors))
            tsOp.DeclareInput("allorany", tsTypeActorReferenceAllOrAny)
            tsOp = env.DeclareOp("DataFunctions", "All Actors With Tag", tsTypeActorList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListAllActorsWithTag))
            tsOp.DeclareInput("tag", tsTypeActorListSenseTagList)
            tsOp.DeclareInput("allorany", tsTypeActorReferenceAllOrAny)
            tsOp = env.DeclareOp("DataFunctions", "All Actors on Team", tsTypeActorList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListAllActorsOnTeam))
            tsOp.DeclareInput("cam", tsTypeActorListFactionList)
            tsOp.DeclareInput("allorany", tsTypeActorReferenceAllOrAny)
            tsOp.DeclareInput("dimName", tsTypetriggerSceneDimension)
            tsOp = env.DeclareOp("DataFunctions", "All Actors Within Area", tsTypeActorList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListInArea))
            tsOp.DeclareInput("area", tsTypeArea)
            tsOp.DeclareInput("allorany", tsTypeActorReferenceAllOrAny)
            tsOp = env.DeclareOp("DataFunctions", "All ThreatTypes of Actor", tsTypeActorList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListThreatTypes))
            tsOp.DeclareInput("threat", tsTypeActorListThreatType)
            tsOp.DeclareInput("baseActor", tsTypeActor)
            tsOp.DeclareInput("allorany", tsTypeActorReferenceAllOrAny)
            tsOp = env.DeclareOp("DataFunctions", "All ThreatTypes of Actor in Area", tsTypeActorList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListThreatTypesInArea))
            tsOp.DeclareInput("threat", tsTypeActorListThreatType)
            tsOp.DeclareInput("baseActor", tsTypeActor)
            tsOp.DeclareInput("area", tsTypeArea)
            tsOp.DeclareInput("allorany", tsTypeActorReferenceAllOrAny)
            tsOp = env.DeclareOp("DataFunctions", "Specific Actor", tsTypeActorList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListSpecificActor))
            tsOp.DeclareInput("actor", tsTypeActor)
            tsOp.DeclareInput("allorany", tsTypeActorReferenceAllOrAny)
            tsOp = env.DeclareOp("DataFunctions", "Tag From String", tsTypeActorListSenseTagList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTagFromString))
            tsOp.DeclareInput("str", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Variable (int)", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetVariableInt))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Variable (float)", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetVariableFloat))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Variable (bool)", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetVariableBool))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Variable (string)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetVariableString))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Topic Variable (int)", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTopicVariableInt))
            tsOp.DeclareInput("topicName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Topic Variable (float)", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTopicVariableFloat))
            tsOp.DeclareInput("topicName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Topic Variable (bool)", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTopicVariableBool))
            tsOp.DeclareInput("topicName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Topic Variable (string)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetTopicVariableString))
            tsOp.DeclareInput("topicName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Story Variable (int)", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetStoryVariableInt))
            tsOp.DeclareInput("storyName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Story Variable (float)", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetStoryVariableFloat))
            tsOp.DeclareInput("storyName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Story Variable (bool)", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetStoryVariableBool))
            tsOp.DeclareInput("storyName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Story Variable (string)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetStoryVariableString))
            tsOp.DeclareInput("storyName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Previous Story Variable (int)", tsTypePropPreviousStoryVariable, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPreviousStoryVariableInt))
            tsOp.DeclareInput("storyName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Previous Story Variable (float)", tsTypePropPreviousStoryVariable, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPreviousStoryVariableFloat))
            tsOp.DeclareInput("storyName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Previous Story Variable (bool)", tsTypePropPreviousStoryVariable, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPreviousStoryVariableBool))
            tsOp.DeclareInput("storyName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Previous Story Variable (string)", tsTypePropPreviousStoryVariable, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPreviousStoryVariableString))
            tsOp.DeclareInput("storyName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Dependent Story Variable (int)", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetDependentStoryVariableInt))
            tsOp.DeclareInput("val", tsTypePropPreviousStoryVariable)
            tsOp.DeclareInput("default", tsTypeInt)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Dependent Story Variable (float)", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetDependentStoryVariableFloat))
            tsOp.DeclareInput("val", tsTypePropPreviousStoryVariable)
            tsOp.DeclareInput("default", tsTypeFloat)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Dependent Story Variable (bool)", tsTypeBool, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetDependentStoryVariableBool))
            tsOp.DeclareInput("val", tsTypePropPreviousStoryVariable)
            tsOp.DeclareInput("default", tsTypeBool)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Dependent Story Variable (string)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetDependentStoryVariableString))
            tsOp.DeclareInput("val", tsTypePropPreviousStoryVariable)
            tsOp.DeclareInput("default", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Actor)", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemActor))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Actor Reference)", tsTypeActorReference, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemActorReference))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Player)", tsTypeActor, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemPlayer))
            tsOp.DeclareInput("index", tsTypeInt)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Trigger)", tsTypetrigger, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemTrigger))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Prop)", tsTypeProp, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemProp))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Scene)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemScene))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (SceneDimension)", tsTypeProp, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemSceneDimension))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (InteractableObject)", tsTypeProp, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemInteractableObject))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Region)", tsTypeRegion, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemRegion))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (CameraRegion)", tsTypeCameraRegion, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemRegion))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (PatrolRoute)", tsTypePatrolRoute, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemPatrolRoute))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Event)", tsTypeEvent, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemEvent))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Item)", tsTypeActorListItem, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemItem))
            tsOp.DeclareInput("itemName", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Conversation)", tsTypeActorListConversation, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemConversation))
            tsOp.DeclareInput("itemName", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (SenseTagList)", tsTypeActorListSenseTagList, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemSenseTagList))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Goal)", tsTypeActorReferenceGoal, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemGoal))
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Sound)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemSound))
            tsOp.DeclareInput("bundleName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Music)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemMusic))
            tsOp.DeclareInput("bundleName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (AnimationModifiers)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemAnimationModifiers))
            tsOp.DeclareInput("animName", tsTypeString)
            tsOp.DeclareInput("animMod", tsTypeString)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Preset Value (int)", tsTypeInt, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPresetValueInt))
            tsOp.DeclareInput("typeName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeInt)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Preset Value (float)", tsTypeFloat, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPresetValueFloat))
            tsOp.DeclareInput("typeName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeInt)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Preset Value (string)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetPresetValueString))
            tsOp.DeclareInput("typeName", tsTypeString)
            tsOp.DeclareInput("index", tsTypeInt)
            tsOp = env.DeclareOp("DataFunctions", "Get User Entitlement (string)", tsTypeString, New TScript.TsOp.EvalDelegate(AddressOf Shadowrun.GetUserEntitlement))
            tsOp.DeclareInput("pref", tsTypePropEntitlementType)
        End Sub