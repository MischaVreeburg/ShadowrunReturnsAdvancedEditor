       Public Shared Sub Declare(ByVal env As TsEnvironment)
            Dim type As TsType = env.GetType("void")
            Dim tsType As TsType = env.GetType("int")
            Dim type1 As TsType = env.GetType("float")
            Dim tsType1 As TsType = env.GetType("bool")
            Dim type2 As TsType = env.GetType("string")
            Dim tsType2 As TsType = env.DeclareType("Actor")
            Dim tsType3 As TsType = env.DeclareType("ActorList")
            Dim tsType4 As TsType = env.DeclareType("ActorReference")
            Dim tsType5 As TsType = env.DeclareType("trigger")
            Dim tsType6 As TsType = env.DeclareType("Prop")
            Dim tsType7 As TsType = env.DeclareType("Point")
            Dim tsType8 As TsType = env.DeclareType("Event")
            Dim tsType9 As TsType = env.DeclareType("CustomProperty")
            Dim tsType10 As TsType = env.DeclareType("Region")
            Dim tsType11 As TsType = env.DeclareType("CameraRegion")
            Dim tsType12 As TsType = env.DeclareType("Area")
            Dim tsType13 As TsType = env.DeclareType("PatrolRoute")
            Dim tsType14 As TsType = env.DeclareType("HPOrAP")
            Dim tsType15 As TsType = env.DeclareType("InOrOut")
            Dim tsType16 As TsType = env.DeclareType("EnableOrDisable", tsType)
            Dim tsType17 As TsType = env.DeclareType("IsOrIsNot", tsType)
            Dim tsType18 As TsType = env.DeclareType("DeathMethod", tsType)
            Dim tsType19 As TsType = env.DeclareType("HackIndicatorStatus", tsType)
            Dim tsType20 As TsType = env.DeclareType("AreOrAreNot", tsType)
            Dim tsType21 As TsType = env.DeclareType("TurnBasedOrFreeMove", tsType)
            Dim tsType22 As TsType = env.DeclareType("HasOrHasNot", tsType)
            Dim tsType23 As TsType = env.DeclareType("BaseOrCurrent", tsType)
            Dim tsType24 As TsType = env.DeclareType("DeadOrAlive", tsType)
            Dim tsType25 As TsType = env.DeclareType("WaitOrNot", tsType)
            Dim tsType26 As TsType = env.DeclareType("WithOrWithout", tsType)
            Dim tsType27 As TsType = env.DeclareType("PlayerOrAI", tsType)
            Dim tsType28 As TsType = env.DeclareType("InteractableObject", tsType6)
            Dim tsType29 As TsType = env.DeclareType("GoalStatus", tsType)
            Dim tsType30 As TsType = env.DeclareType("ActorAttributes", tsType)
            Dim tsType31 As TsType = env.DeclareType("ActorSkills", tsType)
            Dim tsType32 As TsType = env.DeclareType("ActorSpecializations", tsType)
            Dim tsType33 As TsType = env.DeclareType("PrimaryOrSecondary", tsType)
            Dim tsType34 As TsType = env.DeclareType("Item")
            Dim tsType35 As TsType = env.DeclareType("Conversation")
            Dim tsType36 As TsType = env.DeclareType("FactionList", type2)
            Dim tsType37 As TsType = env.DeclareType("ThreatType")
            Dim tsType38 As TsType = env.DeclareType("TargetPreference")
            Dim tsType39 As TsType = env.DeclareType("SenseTagList")
            Dim tsType40 As TsType = env.DeclareType("Goal")
            Dim tsType41 As TsType = env.DeclareType("StatusCondition")
            Dim tsType42 As TsType = env.DeclareType("CoverAmount")
            Dim tsType43 As TsType = env.DeclareType("Race")
            Dim tsType44 As TsType = env.DeclareType("Gender")
            Dim tsType45 As TsType = env.DeclareType("AllOrAny")
            Dim tsType46 As TsType = env.DeclareType("EnterOrExit")
            Dim tsType47 As TsType = env.DeclareType("AIAttitude")
            Dim tsType48 As TsType = env.DeclareType("TeamAlliance")
            Dim tsType49 As TsType = env.DeclareType("VectorComponent")
            Dim tsType50 As TsType = env.DeclareType("Consciousness")
            Dim tsType51 As TsType = env.DeclareType("FacingDirection")
            Dim tsType52 As TsType = env.DeclareType("Sound")
            Dim tsType53 As TsType = env.DeclareType("Music")
            Dim tsType54 As TsType = env.DeclareType("TextPopupStyle")
            Dim tsType55 As TsType = env.DeclareType("BuffDebuffType")
            Dim tsType56 As TsType = env.DeclareType("SaveGameType")
            Dim tsType57 As TsType = env.DeclareType("MajorMinorSaveType")
            Dim tsType58 As TsType = env.DeclareType("SceneDimension")
            Dim tsType59 As TsType = env.DeclareType("AnimationState")
            Dim tsType60 As TsType = env.DeclareType("AnimationModifiers")
            Dim tsType61 As TsType = env.DeclareType("PreviousStoryVariable")
            Dim tsType62 As TsType = env.DeclareType("AIAttackStyle")
            Dim tsType63 As TsType = env.DeclareType("TeleportMethod", tsType)
            Dim tsType64 As TsType = env.DeclareType("RunSpeedMethod", tsType)
            Dim tsType65 As TsType = env.DeclareType("VulnerabilityType", tsType)
            Dim tsType66 As TsType = env.DeclareType("EntitlementType", tsType)
            Dim tsPreset As TsPreset = env.DeclarePreset("Preset Values", "Consciousness", tsType50)
            tsPreset.DeclareValue("Unconscious", 0, "Unconscious")
            tsPreset.DeclareValue("Conscious", 1, "Conscious")
            Dim tsPreset1 As TsPreset = env.DeclarePreset("Preset Values", "GoalStatus", tsType29)
            tsPreset1.DeclareValue("Hidden", 0, "Hidden")
            tsPreset1.DeclareValue("Started", 1, "Started")
            tsPreset1.DeclareValue("Success", 2, "Success")
            tsPreset1.DeclareValue("Failure", 3, "Failure")
            Dim tsPreset2 As TsPreset = env.DeclarePreset("Preset Values", "EnableOrDisable", tsType16)
            tsPreset2.DeclareValue("Enable", 0, "Enable")
            tsPreset2.DeclareValue("Disable", 1, "Disable")
            Dim tsPreset3 As TsPreset = env.DeclarePreset("Preset Values", "BaseOrCurrent", tsType23)
            tsPreset3.DeclareValue("base", 0, "base")
            tsPreset3.DeclareValue("current", 1, "current")
            Dim tsPreset4 As TsPreset = env.DeclarePreset("Preset Values", "DeadOrAlive", tsType24)
            tsPreset4.DeclareValue("Dead", 0, "Dead")
            tsPreset4.DeclareValue("Alive", 1, "Alive")
            Dim tsPreset5 As TsPreset = env.DeclarePreset("Preset Values", "PrimaryOrSecondary", tsType33)
            tsPreset5.DeclareValue("Primary", 0, "Primary")
            tsPreset5.DeclareValue("Secondary", 1, "Secondary")
            Dim tsPreset6 As TsPreset = env.DeclarePreset("Preset Values", "HackIndicatorStatus", tsType19)
            tsPreset6.DeclareValue("hacked", 0, "hacked")
            tsPreset6.DeclareValue("not hacked", 1, "not hacked")
            tsPreset6.DeclareValue("disconnected", 2, "disconnected")
            Dim tsPreset7 As TsPreset = env.DeclarePreset("Preset Values", "AIAttackStyle", tsType62)
            tsPreset7.DeclareValue("Best Only", 0, "Best Only")
            tsPreset7.DeclareValue("All Equal", 1, "All Equal")
            tsPreset7.DeclareValue("Any NonZero", 2, "Any NonZero")
            tsPreset7.DeclareValue("Cycle All", 3, "Cycle All")
            tsPreset7.DeclareValue("Random All", 4, "Random All")
            Dim tsPreset8 As TsPreset = env.DeclarePreset("Preset Values", "ActorAttributes", tsType30)
            tsPreset8.DeclareValue("Body", 1, "Body")
            tsPreset8.DeclareValue("Quickness", 2, "Quickness")
            tsPreset8.DeclareValue("Strength", 3, "Strength")
            tsPreset8.DeclareValue("Charisma", 4, "Charisma")
            tsPreset8.DeclareValue("Intelligence", 5, "Intelligence")
            tsPreset8.DeclareValue("Willpower", 6, "Willpower")
            tsPreset8.DeclareValue("Essence", 7, "Essence")
            tsPreset8.DeclareValue("Magic", 8, "Magic")
            tsPreset8.DeclareValue("HP", 11, "HP")
            tsPreset8.DeclareValue("AP", 12, "AP")
            tsPreset8.DeclareValue("Armor", 13, "Armor")
            tsPreset8.DeclareValue("Force", 14, "Force")
            tsPreset8.DeclareValue("Move Speed", 15, "Move Speed")
            tsPreset8.DeclareValue("Magic Essence", 16, "Magic Essence")
            tsPreset8.DeclareValue("Authority", 101, "Authority")
            tsPreset8.DeclareValue("Discipline", 102, "Discipline")
            tsPreset8.DeclareValue("Morale", 103, "Morale")
            tsPreset8.DeclareValue("Awareness", 104, "Awareness")
            tsPreset8.DeclareValue("Perception", 105, "Perception")
            tsPreset8.DeclareValue("Protect Tether Range", 106, "Protect Tether Range")
            tsPreset8.DeclareValue("Fearless", 107, "Fearless")
            Dim tsPreset9 As TsPreset = env.DeclarePreset("Preset Values", "ActorSkills", tsType31)
            tsPreset9.DeclareValue("Ranged Combat", 1, "Ranged Combat")
            tsPreset9.DeclareValue("Close Combat", 2, "Close Combat")
            tsPreset9.DeclareValue("Throwing Weapons", 3, "Throwing Weapons")
            tsPreset9.DeclareValue("Spellcasting", 4, "Spellcasting")
            tsPreset9.DeclareValue("Chi Casting", 5, "Chi Casting")
            tsPreset9.DeclareValue("Decking", 20, "Decking")
            tsPreset9.DeclareValue("Deck Build/Repair", 21, "Deck Build/Repair")
            tsPreset9.DeclareValue("Conjuring", 30, "Conjuring")
            tsPreset9.DeclareValue("Summoning", 31, "Summoning")
            tsPreset9.DeclareValue("Drain Resistance", 35, "Drain Resistance")
            tsPreset9.DeclareValue("Drone Control", 50, "Drone Control")
            tsPreset9.DeclareValue("Biotech", 61, "Biotech")
            tsPreset9.DeclareValue("Dodge", 62, "Dodge")
            tsPreset9.DeclareValue("Etiquette: Corporate", 100, "Etiquette: Corporate")
            tsPreset9.DeclareValue("Etiquette: Security", 101, "Etiquette: Security")
            tsPreset9.DeclareValue("Etiquette: Gang", 102, "Etiquette: Gang")
            tsPreset9.DeclareValue("Etiquette: Socialite", 104, "Etiquette: Socialite")
            tsPreset9.DeclareValue("Etiquette: Shadowrunner", 106, "Etiquette: Shadowrunner")
            tsPreset9.DeclareValue("Etiquette: Street", 107, "Etiquette: Street")
            tsPreset9.DeclareValue("Etiquette: Academic", 108, "Etiquette: Academic")
            Dim tsPreset10 As TsPreset = env.DeclarePreset("Preset Values", "ActorSpecializations", tsType32)
            tsPreset10.DeclareValue("Pistol", 4, "Pistol")
            tsPreset10.DeclareValue("Rifle", 5, "Rifle")
            tsPreset10.DeclareValue("Shotgun", 6, "Shotgun")
            tsPreset10.DeclareValue("SMG", 7, "SMG")
            tsPreset10.DeclareValue("Edged", 21, "Edged")
            tsPreset10.DeclareValue("Unarmed", 23, "Unarmed")
            tsPreset10.DeclareValue("ESP Control", 83, "ESP Control")
            tsPreset10.DeclareValue("Spirit Control", 90, "Spirit Control")
            tsPreset10.DeclareValue("Drone Combat", 100, "Drone Combat")
            Dim tsPreset11 As TsPreset = env.DeclarePreset("Preset Values", "Race", tsType43)
            tsPreset11.DeclareValue("Human", 0, "Human")
            tsPreset11.DeclareValue("Dwarf", 1, "Dwarf")
            tsPreset11.DeclareValue("Elf", 2, "Elf")
            tsPreset11.DeclareValue("Ork", 3, "Ork")
            tsPreset11.DeclareValue("Troll", 4, "Troll")
            tsPreset11.DeclareValue("Dragon", 5, "Dragon")
            tsPreset11.DeclareValue("Ghoul", 6, "Ghoul")
            tsPreset11.DeclareValue("Spirit", 7, "Spirit")
            tsPreset11.DeclareValue("Drone", 8, "Drone")
            tsPreset11.DeclareValue("Object", 9, "Object")
            tsPreset11.DeclareValue("Creature", 10, "Creature")
            tsPreset11.DeclareValue("Free Spirit", 11, "Free Spirit")
            tsPreset11.DeclareValue("Free Drone", 12, "Free Drone")
            Dim tsPreset12 As TsPreset = env.DeclarePreset("Preset Values", "Gender", tsType44)
            tsPreset12.DeclareValue("None", 0, "None")
            tsPreset12.DeclareValue("Male", 1, "Male")
            tsPreset12.DeclareValue("Female", 2, "Female")
            Dim tsPreset13 As TsPreset = env.DeclarePreset("Preset Values", "ThreatType", tsType37)
            tsPreset13.DeclareValue("ThreatType-Enemy", 0, "ThreatType-Enemy")
            tsPreset13.DeclareValue("ThreatType-Friendly", 1, "ThreatType-Friendly")
            tsPreset13.DeclareValue("ThreatType-Neutral", 2, "ThreatType-Neutral")
            tsPreset13.DeclareValue("ThreatType-Visible|Enemy", 3, "ThreatType-Visible|Enemy")
            tsPreset13.DeclareValue("ThreatType-Visible|Friendly", 4, "ThreatType-Visible|Friendly")
            tsPreset13.DeclareValue("ThreatType-Visible|Neutral", 5, "ThreatType-Visible|Neutral")
            Dim tsPreset14 As TsPreset = env.DeclarePreset("Preset Values", "HPOrAP", tsType14)
            tsPreset14.DeclareValue("HP", 0, "HP")
            tsPreset14.DeclareValue("AP", 1, "AP")
            Dim tsPreset15 As TsPreset = env.DeclarePreset("Preset Values", "InOrOut", tsType15)
            tsPreset15.DeclareValue("In", 0, "In")
            tsPreset15.DeclareValue("Out", 1, "Out")
            Dim tsPreset16 As TsPreset = env.DeclarePreset("Preset Values", "TargetPreference", tsType38)
            tsPreset16.DeclareValue("Closest", 0, "Closest")
            tsPreset16.DeclareValue("Optimum Range", 1, "Optimum Range")
            tsPreset16.DeclareValue("Most Dangerous", 2, "Most Dangerous")
            tsPreset16.DeclareValue("Most Wounded", 3, "Most Wounded")
            tsPreset16.DeclareValue("Least Wounded", 4, "Least Wounded")
            tsPreset16.DeclareValue("Jacked Decker", 5, "Jacked Decker")
            tsPreset16.DeclareValue("Mage", 6, "Mage")
            tsPreset16.DeclareValue("Shaman", 7, "Shaman")
            Dim tsPreset17 As TsPreset = env.DeclarePreset("Preset Values", "bool", tsType1)
            tsPreset17.DeclareValue("false", False, "false")
            tsPreset17.DeclareValue("true", True, "true")
            Dim tsPreset18 As TsPreset = env.DeclarePreset("Preset Values", "AIAttitude", tsType47)
            tsPreset18.DeclareValue("Cautious", 1, "Cautious")
            tsPreset18.DeclareValue("Aggressive", 2, "Aggressive")
            tsPreset18.DeclareValue("Boss", 3, "Boss")
            Dim tsPreset19 As TsPreset = env.DeclarePreset("Preset Values", "IsOrIsNot", tsType17)
            tsPreset19.DeclareValue("is not", 0, "is not")
            tsPreset19.DeclareValue("is", 1, "is")
            Dim tsPreset20 As TsPreset = env.DeclarePreset("Preset Values", "AreOrAreNot", tsType20)
            tsPreset20.DeclareValue("are not", 0, "are not")
            tsPreset20.DeclareValue("are", 1, "are")
            Dim tsPreset21 As TsPreset = env.DeclarePreset("Preset Values", "HasOrHasNot", tsType22)
            tsPreset21.DeclareValue("does not have", 0, "does not have")
            tsPreset21.DeclareValue("has", 1, "has")
            Dim tsPreset22 As TsPreset = env.DeclarePreset("Preset Values", "DeathMethod", tsType18)
            tsPreset22.DeclareValue("Default", 0, "Default")
            tsPreset22.DeclareValue("Downed", 1, "Downed")
            tsPreset22.DeclareValue("Permanently Dead", 2, "Permanently Dead")
            tsPreset22.DeclareValue("Vanish", 3, "Vanish")
            Dim tsPreset23 As TsPreset = env.DeclarePreset("Preset Values", "TurnBasedOrFreeMove", tsType21)
            tsPreset23.DeclareValue("Turn-Based", 0, "Turn-Based")
            tsPreset23.DeclareValue("Freemove", 1, "Freemove")
            Dim tsPreset24 As TsPreset = env.DeclarePreset("Preset Values", "AllOrAny", tsType45)
            tsPreset24.DeclareValue("All", 0, "All")
            tsPreset24.DeclareValue("Any", 1, "Any")
            Dim tsPreset25 As TsPreset = env.DeclarePreset("Preset Values", "WaitOrNot", tsType25)
            tsPreset25.DeclareValue("don't wait", 0, "don't wait")
            tsPreset25.DeclareValue("wait", 1, "wait")
            Dim tsPreset26 As TsPreset = env.DeclarePreset("Preset Values", "EnterOrExit", tsType46)
            tsPreset26.DeclareValue("Enter", 0, "Enter")
            tsPreset26.DeclareValue("Exit", 1, "Exit")
            Dim tsPreset27 As TsPreset = env.DeclarePreset("Preset Values", "WithOrWithout", tsType26)
            tsPreset27.DeclareValue("without", 0, "without")
            tsPreset27.DeclareValue("with", 1, "with")
            Dim tsPreset28 As TsPreset = env.DeclarePreset("Preset Values", "PlayerOrAI", tsType27)
            tsPreset28.DeclareValue("Player", 0, "Player")
            tsPreset28.DeclareValue("AI", 1, "AI")
            Dim tsPreset29 As TsPreset = env.DeclarePreset("Preset Values", "TeamAlliance", tsType48)
            tsPreset29.DeclareValue("Neutral", 0, "Neutral")
            tsPreset29.DeclareValue("Enemy", 1, "Enemy")
            Dim tsPreset30 As TsPreset = env.DeclarePreset("Preset Values", "StatusCondition", tsType41)
            tsPreset30.DeclareValue("Blind", 1, "Blind")
            tsPreset30.DeclareValue("Deaf", 2, "Deaf")
            tsPreset30.DeclareValue("Rooted", 3, "Rooted")
            tsPreset30.DeclareValue("Silence", 4, "Silence")
            tsPreset30.DeclareValue("Disarmed", 5, "Disarmed")
            tsPreset30.DeclareValue("Petrified", 6, "Petrified")
            tsPreset30.DeclareValue("Confused", 7, "Confused")
            tsPreset30.DeclareValue("Mind Wiped", 8, "Mind Wiped")
            tsPreset30.DeclareValue("Invisible", 9, "Invisible")
            tsPreset30.DeclareValue("Half Visibility", 10, "Half Visibility")
            tsPreset30.DeclareValue("Dispelled", 11, "Dispelled")
            tsPreset30.DeclareValue("Paralyzed", 12, "Paralyzed")
            tsPreset30.DeclareValue("Killing Hands", 13, "Killing Hands")
            tsPreset30.DeclareValue("Mage Aura", 14, "Mage Aura")
            tsPreset30.DeclareValue("Light Cover", 50, "Light Cover")
            tsPreset30.DeclareValue("Medium Cover", 51, "Medium Cover")
            tsPreset30.DeclareValue("Heavy Cover", 52, "Heavy Cover")
            tsPreset30.DeclareValue("Magic Cover Light", 53, "Magic Cover Light")
            tsPreset30.DeclareValue("Magic Cover Medium", 54, "Magic Cover Medium")
            tsPreset30.DeclareValue("Magic Cover Heavy", 55, "Magic Cover Heavy")
            tsPreset30.DeclareValue("Mage Enhancement: Light", 60, "Mage Enhancement: Light")
            tsPreset30.DeclareValue("Mage Enhancement: Medium", 61, "Mage Enhancement: Medium")
            tsPreset30.DeclareValue("Mage Enhancement: Heavy", 62, "Mage Enhancement: Heavy")
            Dim tsPreset31 As TsPreset = env.DeclarePreset("Preset Values", "FacingDirection", tsType51)
            tsPreset31.DeclareValue("No Facing", -1, "No Facing")
            tsPreset31.DeclareValue("North", 6, "North")
            tsPreset31.DeclareValue("North East", 7, "North East")
            tsPreset31.DeclareValue("East", 0, "East")
            tsPreset31.DeclareValue("South East", 1, "South East")
            tsPreset31.DeclareValue("South", 2, "South")
            tsPreset31.DeclareValue("South West", 3, "South West")
            tsPreset31.DeclareValue("West", 4, "West")
            tsPreset31.DeclareValue("North West", 5, "North West")
            Dim tsPreset32 As TsPreset = env.DeclarePreset("Preset Values", "CoverAmount", tsType42)
            tsPreset32.DeclareValue("None", 0, "None")
            tsPreset32.DeclareValue("Light", 1, "Light")
            tsPreset32.DeclareValue("Medium", 2, "Medium")
            tsPreset32.DeclareValue("Heavy", 3, "Heavy")
            Dim tsPreset33 As TsPreset = env.DeclarePreset("Preset Values", "VectorComponent", tsType49)
            tsPreset33.DeclareValue("X", 0, "X")
            tsPreset33.DeclareValue("Y", 1, "Y")
            tsPreset33.DeclareValue("Z", 2, "Z")
            Dim tsPreset34 As TsPreset = env.DeclarePreset("Preset Values", "EnvironmentalEffects", type2)
            tsPreset34.DeclareValue("rain", "Weather_Rain", "rain")
            tsPreset34.DeclareValue("fog", "Weather_Fog", "fog")
            tsPreset34.DeclareValue("lowClouds", "Weather_LowClouds", "lowClouds")
            Dim tsPreset35 As TsPreset = env.DeclarePreset("Preset Values", "TextPopupStyle", tsType54)
            tsPreset35.DeclareValue("Speech Bubble", 0, "Speech Bubble")
            tsPreset35.DeclareValue("GM Text", 1, "GM Text")
            tsPreset35.DeclareValue("Action Text", 2, "Action Text")
            Dim tsPreset36 As TsPreset = env.DeclarePreset("Preset Values", "BuffDebuffType", tsType55)
            tsPreset36.DeclareValue("Innate", 0, "Innate")
            tsPreset36.DeclareValue("Buff", 1, "Buff")
            tsPreset36.DeclareValue("Debuff", 2, "Debuff")
            Dim tsPreset37 As TsPreset = env.DeclarePreset("Preset Values", "SaveGameType", tsType56)
            tsPreset37.DeclareValue("Manual", 0, "Manual")
            tsPreset37.DeclareValue("Auto", 1, "Auto")
            Dim tsPreset38 As TsPreset = env.DeclarePreset("Preset Values", "MajorMinorSaveType", tsType57)
            tsPreset38.DeclareValue("Major", 0, "Major")
            tsPreset38.DeclareValue("Minor", 1, "Minor")
            Dim tsPreset39 As TsPreset = env.DeclarePreset("Preset Values", "AnimationState", tsType59)
            tsPreset39.DeclareValue("idle alert", "idle_alert", "idle alert")
            tsPreset39.DeclareValue("idle calm", "idle_calm", "idle calm")
            tsPreset39.DeclareValue("idle cower", "idle_cower", "idle cower")
            Dim tsPreset40 As TsPreset = env.DeclarePreset("Preset Values", "TeleportMethod", tsType63)
            tsPreset40.DeclareValue("Warp Teleport", 0, "Warp Teleport")
            tsPreset40.DeclareValue("Warp FAST", 1, "Warp FAST")
            tsPreset40.DeclareValue("Warp MEDIUM", 2, "Warp MEDIUM")
            tsPreset40.DeclareValue("Warp SLOW", 3, "Warp SLOW")
            Dim tsPreset41 As TsPreset = env.DeclarePreset("Preset Values", "RunSpeedMethod", tsType64)
            tsPreset41.DeclareValue("Teleport Speed", 0, "Teleport Speed")
            tsPreset41.DeclareValue("Sprint Speed", 1, "Sprint Speed")
            tsPreset41.DeclareValue("Normal Speed", 2, "Normal Speed")
            tsPreset41.DeclareValue("Walk Speed", 3, "Walk Speed")
            tsPreset41.DeclareValue("Super Speed", 4, "Super Speed")
            tsPreset41.DeclareValue("Default", 5, "Default")
            Dim tsPreset42 As TsPreset = env.DeclarePreset("Preset Values", "VulnerabilityType", tsType65)
            tsPreset42.DeclareValue("Normal", 0, "Normal")
            tsPreset42.DeclareValue("Magic", 1, "Magic")
            tsPreset42.DeclareValue("Repair", 2, "Repair")
            tsPreset42.DeclareValue("Heal", 3, "Heal")
            tsPreset42.DeclareValue("Insecticide", 4, "Insecticide")
            tsPreset42.DeclareValue("Fire", 5, "Fire")
            tsPreset42.DeclareValue("Death", 6, "Death")
            tsPreset42.DeclareValue("Buff", 7, "Buff")
            tsPreset42.DeclareValue("Debuff", 8, "Debuff")
            tsPreset42.DeclareValue("Stun", 9, "Stun")
            tsPreset42.DeclareValue("Crit", 10, "Crit")
            tsPreset42.DeclareValue("PermaDeath", 11, "PermaDeath")
            Dim tsPreset43 As TsPreset = env.DeclarePreset("Entitlement Values", "EntitlementType", tsType66)
            tsPreset43.DeclareValue("EarlyAccess", 0, "EarlyAccess")
            tsPreset43.DeclareValue("DocWagon", 1, "DocWagon")
            tsPreset43.DeclareValue("Special", 2, "Special")
            tsPreset43.DeclareValue("Level", 3, "Level")
            tsPreset43.DeclareValue("ID", 4, "ID")
            Dim preset As TsPreset = env.GetPreset("Arithmetic Ops")
            Dim preset1 As TsPreset = env.GetPreset("Comparison Ops")
            Dim tsOp As TsOp = env.DeclareOp("ConditionFunction", "No Condition", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.NoConditionFunction))
            tsOp = env.DeclareOp("ConditionFunction", "AND", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.ConditionAndCondition))
            tsOp.DeclareInput("cond1", tsType1)
            tsOp.DeclareInput("cond2", tsType1)
            tsOp = env.DeclareOp("ConditionFunction", "OR", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.ConditionOrCondition))
            tsOp.DeclareInput("cond1", tsType1)
            tsOp.DeclareInput("cond2", tsType1)
            tsOp = env.DeclareOp("ConditionFunction", "Comparison (Actor)", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorComparison))
            tsOp.DeclareInput("actorA", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp.DeclareInput("actorB", tsType2)
            tsOp = env.DeclareOp("ConditionFunction", "Compare Actor Team", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorTeamComparison))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp.DeclareInput("team", tsType36)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("ConditionFunction", "Compare Actor Race", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorRaceComparison))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp.DeclareInput("team", tsType43)
            tsOp = env.DeclareOp("ConditionFunction", "Compare Actor Gender", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorGenderComparison))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp.DeclareInput("team", tsType44)
            tsOp = env.DeclareOp("DataFunctions", "Compare Actor Attribute", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.CompareActorAttribute))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("baseorcurrent", tsType23)
            tsOp.DeclareInput("attribute", tsType30)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("b", tsType)
            tsOp = env.DeclareOp("DataFunctions", "Compare Actor Skill", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.CompareActorSkill))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("baseorcurrent", tsType23)
            tsOp.DeclareInput("attribute", tsType31)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("b", tsType)
            tsOp = env.DeclareOp("DataFunctions", "Compare Actor Specialization", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.CompareActorSpecialization))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("baseorcurrent", tsType23)
            tsOp.DeclareInput("attribute", tsType32)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("b", tsType)
            tsOp = env.DeclareOp("ConditionFunction", "Compare Hire-able Actor Skill", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateHireableActorSkill))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("skill", tsType31)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("value", tsType)
            tsOp = env.DeclareOp("ConditionFunction", "Compare Hire-able Actor Attribute", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateHireableActorAttribute))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("attribute", tsType30)
            tsOp.DeclareInput("op", preset1)
            tsOp.DeclareInput("value", tsType)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Actor Consciousness", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorConsciousness))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("isVal", tsType17)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Actor Cover", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorCover))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("isVal", tsType17)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Cover Between Actors", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateCoverBetweenActors))
            tsOp.DeclareInput("baseActor", tsType2)
            tsOp.DeclareInput("comparison", preset1)
            tsOp.DeclareInput("coverAmount", tsType42)
            tsOp.DeclareInput("targetActor", tsType3)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Actor ThreatType to Actor", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorThreatTypeToActor))
            tsOp.DeclareInput("targetActor", tsType3)
            tsOp.DeclareInput("isVal", tsType17)
            tsOp.DeclareInput("threat", tsType37)
            tsOp.DeclareInput("baseActor", tsType2)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Team Survival Percentage", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateTeamPercentage))
            tsOp.DeclareInput("comparison", preset1)
            tsOp.DeclareInput("val", tsType)
            tsOp.DeclareInput("team", tsType36)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Tag for Actor", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateSenseTagForActor))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("comp", tsType22)
            tsOp.DeclareInput("tagName", tsType39)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Tag for Prop", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateSenseTagForProp))
            tsOp.DeclareInput("prop", tsType6)
            tsOp.DeclareInput("comp", tsType22)
            tsOp.DeclareInput("tagName", tsType39)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate If Actor Has Item", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorItem))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("comp", tsType22)
            tsOp.DeclareInput("itemName", tsType34)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate If Team Has Cyberdeck", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateTeamCyberdeck))
            tsOp.DeclareInput("team", tsType36)
            tsOp.DeclareInput("comp", tsType22)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate If Actor is Inside Region", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateActorInsideRegion))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("comp", tsType20)
            tsOp.DeclareInput("regionName", tsType10)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Turn Mode", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateTurnMode))
            tsOp.DeclareInput("turnmode", tsType21)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Alarm State", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateAlarmState))
            tsOp.DeclareInput("alarmState", tsType17)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Goal", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateGoal))
            tsOp.DeclareInput("goalName", tsType40)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp.DeclareInput("goalStatus", tsType29)
            tsOp = env.DeclareOp("ConditionFunction", "Evaluate Nuyen", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.EvaluateNuyen))
            tsOp.DeclareInput("comparison", preset1)
            tsOp.DeclareInput("val", tsType)
            tsOp = env.DeclareOp("ConditionFunction", "Goal Is Primary", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.GoalIsPrimary))
            tsOp.DeclareInput("goalName", tsType40)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("ConditionFunction", "Actor Has Status Condition", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorHasStatusCondition))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("hashasnot", tsType22)
            tsOp.DeclareInput("cond", tsType41)
            tsOp = env.DeclareOp("ConditionFunction", "Actor Has Run Speed", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorHasRunSpeed))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("hashasnot", tsType22)
            tsOp.DeclareInput("runspeed", tsType64)
            tsOp = env.DeclareOp("EffectFunctions", "No Effect", type, New TsOp.EvalDelegate(AddressOf Shadowrun.NoEffectFunction))
            tsOp = env.DeclareOp("EffectFunctions", "Retain Trigger", type, New TsOp.EvalDelegate(AddressOf Shadowrun.DEPRECATEDRetainTriggerFunction))
            tsOp = env.DeclareOp("EffectFunctions", "Set Retain Trigger", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetRetainTrigger))
            tsOp.DeclareInput("enables", tsType1)
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Trigger", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetTriggerEnabled))
            tsOp.DeclareInput("enables", tsType16)
            tsOp.DeclareInput("triggerVal", tsType5)
            tsOp = env.DeclareOp("EffectFunctions", "Trigger: Wait Until Triggered Again", type, New TsOp.EvalDelegate(AddressOf Shadowrun.TriggerWaitUntilTriggeredAgain))
            tsOp = env.DeclareOp("EffectFunctions", "Trigger: Wait for Event", type, New TsOp.EvalDelegate(AddressOf Shadowrun.TriggerWaitForEvent))
            tsOp.DeclareInput("event", tsType8)
            tsOp = env.DeclareOp("EffectFunctions", "Trigger: Wait for Rounds", type, New TsOp.EvalDelegate(AddressOf Shadowrun.TriggerWaitForRounds))
            tsOp.DeclareInput("rounds", tsType)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Trigger: Run Alternate Trigger", type, New TsOp.EvalDelegate(AddressOf Shadowrun.TriggerRunAlternateTrigger))
            tsOp.DeclareInput("triggerVal", tsType5)
            tsOp.DeclareInput("withwithout", tsType26)
            tsOp.DeclareInput("waitornot", tsType25)
            tsOp = env.DeclareOp("EffectFunctions", "Set Region Enabled", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetRegionEnabled))
            tsOp.DeclareInput("enables", tsType16)
            tsOp.DeclareInput("regionName", tsType10)
            tsOp = env.DeclareOp("EffectFunctions", "Open Named Scene", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenNamedScene))
            tsOp.DeclareInput("sceneName", type2)
            tsOp = env.DeclareOp("EffectFunctions", "Open Scene", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenNamedScene))
            tsOp.DeclareInput("sceneName", type2)
            tsOp = env.DeclareOp("EffectFunctions", "Open Starting Scene", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenStartScene))
            tsOp = env.DeclareOp("EffectFunctions", "End Story With Epilogue", type, New TsOp.EvalDelegate(AddressOf Shadowrun.EndStoryWithEpilogue))
            tsOp.DeclareInput("epilogue", type2)
            tsOp = env.DeclareOp("EffectFunctions", "Send Event", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SendUserEvent))
            tsOp.DeclareInput("event", tsType8)
            tsOp = env.DeclareOp("EffectFunctions", "Send Event After Delay", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SendUserEventAfterDelay))
            tsOp.DeclareInput("event", tsType8)
            tsOp.DeclareInput("delay", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Set Alarm State", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetAlarmState))
            tsOp.DeclareInput("state", tsType1)
            tsOp = env.DeclareOp("EffectFunctions", "Modify Dimension Heat", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ModifyDimensionHeat))
            tsOp.DeclareInput("dimension", tsType58)
            tsOp.DeclareInput("amount", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Add Tag to Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddSenseTagToActor))
            tsOp.DeclareInput("tagName", tsType39)
            tsOp.DeclareInput("actor", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Tag from Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveSenseTagFromActor))
            tsOp.DeclareInput("tagName", tsType39)
            tsOp.DeclareInput("actor", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Add Tag to Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddSenseTagToProp))
            tsOp.DeclareInput("tagName", tsType39)
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Tag from Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveSenseTagFromProp))
            tsOp.DeclareInput("tagName", tsType39)
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Add Item to Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddItemToActor))
            tsOp.DeclareInput("itemName", tsType34)
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("notify", tsType26)
            tsOp = env.DeclareOp("EffectFunctions", "Add Item to Team", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddItemToTeam))
            tsOp.DeclareInput("itemName", tsType34)
            tsOp.DeclareInput("targetTeam", tsType36)
            tsOp.DeclareInput("notify", tsType26)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Add Item to Stash", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddItemToStash))
            tsOp.DeclareInput("itemName", tsType34)
            tsOp.DeclareInput("notify", tsType26)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Item from Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveItemFromActor))
            tsOp.DeclareInput("itemName", tsType34)
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("notify", tsType26)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Item from Team", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveItemFromTeam))
            tsOp.DeclareInput("itemName", tsType34)
            tsOp.DeclareInput("targetTeam", tsType36)
            tsOp.DeclareInput("notify", tsType26)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Item from Stash", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveItemFromStash))
            tsOp.DeclareInput("itemName", tsType34)
            tsOp.DeclareInput("notify", tsType26)
            tsOp = env.DeclareOp("EffectFunctions", "Set Item AI priority weight", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetAIItemPriorityWeight))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("itemName", tsType34)
            tsOp.DeclareInput("weight", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Show Help Screen Popup", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ShowHelpScreenPopup))
            tsOp = env.DeclareOp("EffectFunctions", "Set Goal Status", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetGoalStatus))
            tsOp.DeclareInput("goalName", tsType40)
            tsOp.DeclareInput("goalStatus", tsType29)
            tsOp = env.DeclareOp("EffectFunctions", "Add Nuyen", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddNuyen))
            tsOp.DeclareInput("amount", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Nuyen", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveNuyen))
            tsOp.DeclareInput("amount", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Force-Use Interactable Object (Basic)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ForceUseInteractableBasic))
            tsOp.DeclareInput("objectName", tsType28)
            tsOp = env.DeclareOp("EffectFunctions", "Force-Use Interactable Object (with Actor)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ForceUseInteractableActor))
            tsOp.DeclareInput("objectName", tsType28)
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Interactable Object", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetInteractableObject))
            tsOp.DeclareInput("enables", tsType16)
            tsOp.DeclareInput("objectName", tsType28)
            tsOp = env.DeclareOp("EffectFunctions", "Set Hack Status On Matrix Node Object", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetHackedStatusOnInteractableObject))
            tsOp.DeclareInput("hacked", tsType19)
            tsOp.DeclareInput("objectName", tsType28)
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Hack Indicator On Matrix Node Object", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetHackIndicatorOnInteractableObject))
            tsOp.DeclareInput("enables", tsType16)
            tsOp.DeclareInput("objectName", tsType28)
            tsOp = env.DeclareOp("EffectFunctions", "Set Variable (int)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetVariableInt))
            tsOp.DeclareInput("intVar", tsType9)
            tsOp.DeclareInput("val", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Set Variable (bool)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetVariableBool))
            tsOp.DeclareInput("boolVar", tsType9)
            tsOp.DeclareInput("val", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Set Variable (float)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetVariableFloat))
            tsOp.DeclareInput("floatVar", tsType9)
            tsOp.DeclareInput("val", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Set Variable (string)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetVariableString))
            tsOp.DeclareInput("stringVar", tsType9)
            tsOp.DeclareInput("val", tsType)
            tsOp = env.DeclareOp("Math", "Add To Variable (int)", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.AddToInt))
            tsOp.DeclareInput("a", tsType9)
            tsOp.DeclareInput("b", tsType)
            tsOp = env.DeclareOp("Math", "Add To Variable (float)", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.AddToFloat))
            tsOp.DeclareInput("a", tsType9)
            tsOp.DeclareInput("b", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Attach Region to Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AttachRegionToActor))
            tsOp.DeclareInput("regionName", tsType10)
            tsOp.DeclareInput("actorName", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Detach Region", type, New TsOp.EvalDelegate(AddressOf Shadowrun.DetachRegion))
            tsOp.DeclareInput("regionName", tsType10)
            tsOp = env.DeclareOp("EffectFunctions", "Adjust Region Size", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AdjustRegionSize))
            tsOp.DeclareInput("regionName", tsType10)
            tsOp.DeclareInput("width", tsType)
            tsOp.DeclareInput("depth", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Move Region to Point", type, New TsOp.EvalDelegate(AddressOf Shadowrun.MoveRegionToPoint))
            tsOp.DeclareInput("regionName", tsType10)
            tsOp.DeclareInput("destination", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Change Actor Team", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ChangeActorTeam))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType36)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Change Actor Attack Style", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ChangeActorAttackStyle))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType62)
            tsOp = env.DeclareOp("EffectFunctions", "Change Actor Control", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ChangeActorControl))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("playerai", tsType27)
            tsOp = env.DeclareOp("EffectFunctions", "Set Team Alliance", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetTeamAlliance))
            tsOp.DeclareInput("baseTeam", tsType36)
            tsOp.DeclareInput("affiliation", tsType48)
            tsOp.DeclareInput("targetTeam", tsType36)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Attack Actor With Weapon", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AttackActorWithWeapon))
            tsOp.DeclareInput("attacker", tsType3)
            tsOp.DeclareInput("target", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Reload Weapon", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorReloadWeapon))
            tsOp.DeclareInput("attacker", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Enter/Exit Cover", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorEnterExitCover))
            tsOp.DeclareInput("attacker", tsType3)
            tsOp.DeclareInput("enterexit", tsType46)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Patrol", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToPatrol))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType13)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Face Direction", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToFaceDirection))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("facing", tsType51)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Point)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToPoint))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType7)
            tsOp.DeclareInput("facing", tsType51)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Actor)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToActor))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType2)
            tsOp.DeclareInput("facing", tsType51)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Prop)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToProp))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType6)
            tsOp.DeclareInput("facing", tsType51)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Region)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToRegion))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType10)
            tsOp.DeclareInput("facing", tsType51)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (ThreatType)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToThreatType))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType37)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Move To (Start Position)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToMoveToStartPosition))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("facing", tsType51)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Behavior", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSetBehavior))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("behavior", tsType47)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Point)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectPoint))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Actor)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectActor))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Prop)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectProp))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType6)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Team)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectTeam))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType36)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (Region)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectRegion))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType10)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Protect (ThreatType)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToProtectThreatType))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType37)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Seek And Destroy (Team)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSeekAndDestroyTeam))
            tsOp.DeclareInput("actorName", tsType2)
            tsOp.DeclareInput("orderTarget", tsType36)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Seek And Destroy (ThreatType)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSeekAndDestroyThreatType))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType37)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Hunt And Destroy (Team)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToHuntAndDestroyTeam))
            tsOp.DeclareInput("actorName", tsType2)
            tsOp.DeclareInput("orderTarget", tsType36)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Hunt And Destroy (ThreatType)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToHuntAndDestroyThreatType))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType37)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to become a Non-Combatant", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToNonCombatant))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Set Target Preference", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSetTargetPreference))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType38)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Set Priority Target", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToSetPriorityTarget))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Clear ThreatList", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToClearThreatList))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Interact with Object", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToInteractWithObject))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("orderTarget", tsType28)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Communicate", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToCommunicate))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp.DeclareInput("text", type2)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Call for help", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToCallForHelp))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Order Actor to Flee", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OrderActorToFlee))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Actor Orders", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ClearActorOrders))
            tsOp.DeclareInput("actorName", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Set Waypoint on Point", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetWaypointPoint))
            tsOp.DeclareInput("style", tsType33)
            tsOp.DeclareInput("target", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Waypoint from Point", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ClearWaypointPoint))
            tsOp.DeclareInput("target", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Set Waypoint on Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetWaypointActor))
            tsOp.DeclareInput("style", tsType33)
            tsOp.DeclareInput("target", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Waypoint from Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ClearWaypointActor))
            tsOp.DeclareInput("target", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Set Waypoint on Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetWaypointProp))
            tsOp.DeclareInput("style", tsType33)
            tsOp.DeclareInput("target", tsType6)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Waypoint from Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ClearWaypointProp))
            tsOp.DeclareInput("target", tsType6)
            tsOp = env.DeclareOp("EffectFunctions", "Clear All Waypoints", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ClearAllWaypoints))
            tsOp = env.DeclareOp("EffectFunctions", "Display Text over Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.DisplayTextOverActor))
            tsOp.DeclareInput("target", tsType2)
            tsOp.DeclareInput("style", tsType54)
            tsOp.DeclareInput("text", type2)
            tsOp.DeclareInput("r", type1)
            tsOp.DeclareInput("g", type1)
            tsOp.DeclareInput("b", type1)
            tsOp.DeclareInput("a", type1)
            tsOp.DeclareInput("time", type1)
            tsOp.DeclareInput("fadeTime", type1)
            tsOp.DeclareInput("delayTime", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Display Text over Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.DisplayTextOverProp))
            tsOp.DeclareInput("target", tsType6)
            tsOp.DeclareInput("style", tsType54)
            tsOp.DeclareInput("text", type2)
            tsOp.DeclareInput("r", type1)
            tsOp.DeclareInput("g", type1)
            tsOp.DeclareInput("b", type1)
            tsOp.DeclareInput("a", type1)
            tsOp.DeclareInput("time", type1)
            tsOp.DeclareInput("fadeTime", type1)
            tsOp.DeclareInput("delayTime", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Display Text over Point", type, New TsOp.EvalDelegate(AddressOf Shadowrun.DisplayTextOverPoint))
            tsOp.DeclareInput("target", tsType7)
            tsOp.DeclareInput("style", tsType54)
            tsOp.DeclareInput("text", type2)
            tsOp.DeclareInput("r", type1)
            tsOp.DeclareInput("g", type1)
            tsOp.DeclareInput("b", type1)
            tsOp.DeclareInput("a", type1)
            tsOp.DeclareInput("time", type1)
            tsOp.DeclareInput("fadeTime", type1)
            tsOp.DeclareInput("delayTime", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Display Text at Screen Position", type, New TsOp.EvalDelegate(AddressOf Shadowrun.DisplayTextAtScreenPoint))
            tsOp.DeclareInput("style", tsType54)
            tsOp.DeclareInput("text", type2)
            tsOp.DeclareInput("x", type1)
            tsOp.DeclareInput("y", type1)
            tsOp.DeclareInput("r", type1)
            tsOp.DeclareInput("g", type1)
            tsOp.DeclareInput("b", type1)
            tsOp.DeclareInput("a", type1)
            tsOp.DeclareInput("time", type1)
            tsOp.DeclareInput("fadeTime", type1)
            tsOp.DeclareInput("delayTime", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Play Animation", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorPlayAnimation))
            tsOp.DeclareInput("target", tsType2)
            tsOp.DeclareInput("text", type2)
            tsOp = env.DeclareOp("EffectFunctions", "Set Animation State Of Actor To Animation Modifier", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ActorSetAnimationStateToAnimationModifier))
            tsOp.DeclareInput("animState", tsType59)
            tsOp.DeclareInput("target", tsType2)
            tsOp.DeclareInput("animMod", tsType60)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Camera Shake", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ApplyCameraShake))
            tsOp.DeclareInput("intensity", type1)
            tsOp.DeclareInput("time", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Teleport Camera To Point", type, New TsOp.EvalDelegate(AddressOf Shadowrun.TeleportCameraToPosition))
            tsOp.DeclareInput("point", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Teleport Camera To Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.TeleportCameraToPlayer))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Fade Camera Out", type, New TsOp.EvalDelegate(AddressOf Shadowrun.FadeCameraOut))
            tsOp.DeclareInput("time", type1)
            tsOp.DeclareInput("delay", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Fade Camera In", type, New TsOp.EvalDelegate(AddressOf Shadowrun.FadeCameraIn))
            tsOp.DeclareInput("time", type1)
            tsOp.DeclareInput("delay", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Add Camera Point of Interest (Actors)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddCameraPointOfInterestActors))
            tsOp.DeclareInput("target", tsType3)
            tsOp.DeclareInput("time", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Add Camera Point of Interest (Point)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddCameraPointOfInterestPoint))
            tsOp.DeclareInput("target", tsType7)
            tsOp.DeclareInput("time", type1)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Camera Point of Interest (Actors)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveCameraPointOfInterestActors))
            tsOp.DeclareInput("target", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Camera Point of Interest (Point)", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveCameraPointOfInterestPoint))
            tsOp.DeclareInput("target", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Clear Camera Points of Interest", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ClearCameraPointsOfInterest))
            tsOp = env.DeclareOp("EffectFunctions", "Spawn Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SpawnProp))
            tsOp.DeclareInput("prop", tsType6)
            tsOp.DeclareInput("pos", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Clone Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.CloneProp))
            tsOp.DeclareInput("prop", tsType6)
            tsOp.DeclareInput("pos", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Delete Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.DeleteProp))
            tsOp.DeclareInput("prop", tsType6)
            tsOp = env.DeclareOp("EffectFunctions", "Move Prop", type, New TsOp.EvalDelegate(AddressOf Shadowrun.MoveProp))
            tsOp.DeclareInput("prop", tsType6)
            tsOp.DeclareInput("pos", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Activate Actor Spawner", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ActivateActorSpawner))
            tsOp.DeclareInput("unspawnedActor", tsType4)
            tsOp = env.DeclareOp("EffectFunctions", "Spawn Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SpawnActor))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("pos", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Clone Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.CloneActor))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("pos", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Kill Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.KillActor))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("method", tsType18)
            tsOp = env.DeclareOp("EffectFunctions", "Teleport Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.TeleportActor))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("pos", tsType7)
            tsOp.DeclareInput("facing", tsType51)
            tsOp.DeclareInput("method", tsType63)
            tsOp = env.DeclareOp("EffectFunctions", "Teleport Actor near Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.TelportActorNearActor))
            tsOp.DeclareInput("actor0", tsType3)
            tsOp.DeclareInput("radius", tsType)
            tsOp.DeclareInput("actor1", tsType2)
            tsOp.DeclareInput("facing", tsType51)
            tsOp.DeclareInput("method", tsType63)
            tsOp = env.DeclareOp("EffectFunctions", "Play FX at Point", type, New TsOp.EvalDelegate(AddressOf Shadowrun.PlayFXAtPoint))
            tsOp.DeclareInput("scriptName", type2)
            tsOp.DeclareInput("pos", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Remove FX at Point", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveFXAtPoint))
            tsOp.DeclareInput("scriptName", type2)
            tsOp.DeclareInput("pos", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Play FX on Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.PlayFXOnActor))
            tsOp.DeclareInput("scriptName", type2)
            tsOp.DeclareInput("target", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Remove FX From Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveFXFromActor))
            tsOp.DeclareInput("scriptName", type2)
            tsOp.DeclareInput("target", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Play FX at Point With Target Point", type, New TsOp.EvalDelegate(AddressOf Shadowrun.PlayFXAtPointWithTargetPoint))
            tsOp.DeclareInput("scriptName", type2)
            tsOp.DeclareInput("pos", tsType7)
            tsOp.DeclareInput("target", tsType7)
            tsOp = env.DeclareOp("EffectFunctions", "Play FX at Point With Target Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.PlayFXAtPointWithTargetActor))
            tsOp.DeclareInput("scriptName", type2)
            tsOp.DeclareInput("pos", tsType7)
            tsOp.DeclareInput("target", tsType3)
            tsOp = env.DeclareOp("EffectFunctions", "Cause Damage", type, New TsOp.EvalDelegate(AddressOf Shadowrun.CauseDamage))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("damage", tsType)
            tsOp.DeclareInput("hporap", tsType14)
            tsOp = env.DeclareOp("EffectFunctions", "Cause Damage Over Time", type, New TsOp.EvalDelegate(AddressOf Shadowrun.CauseDamageOverTime))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("damage", tsType)
            tsOp.DeclareInput("hporap", tsType14)
            tsOp.DeclareInput("rounds", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Heal Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.HealActor))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("damage", tsType)
            tsOp.DeclareInput("hporap", tsType14)
            tsOp = env.DeclareOp("EffectFunctions", "Heal Actor Over Time", type, New TsOp.EvalDelegate(AddressOf Shadowrun.HealActorOverTime))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("damage", tsType)
            tsOp.DeclareInput("hporap", tsType14)
            tsOp.DeclareInput("rounds", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Run Speed", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorRunSpeed))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("method", tsType64)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Wander Range", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorWanderRange))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("amount", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor In Passive Mode", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorPassiveMove))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Ignored by Camera", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorCameraIgnore))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Uninjurable", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorInjurability))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Unkillable", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorKillability))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Vulnerability", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorVulnerability))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp.DeclareInput("vuln", tsType65)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Condition Status Effect to Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ApplyConditionStatusEffect))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("cond", tsType41)
            tsOp.DeclareInput("effectName", type2)
            tsOp.DeclareInput("buffType", tsType55)
            tsOp.DeclareInput("rounds", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Attribute Status Effect to Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ApplyAttributeStatusEffect))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("amount", tsType)
            tsOp.DeclareInput("cond", tsType30)
            tsOp.DeclareInput("effectName", type2)
            tsOp.DeclareInput("buffType", tsType55)
            tsOp.DeclareInput("rounds", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Skill Status Effect to Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ApplySkillStatusEffect))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("amount", tsType)
            tsOp.DeclareInput("cond", tsType31)
            tsOp.DeclareInput("effectName", type2)
            tsOp.DeclareInput("buffType", tsType55)
            tsOp.DeclareInput("rounds", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Apply Specialization Status Effect to Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.ApplySpecializationStatusEffect))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("amount", tsType)
            tsOp.DeclareInput("cond", tsType32)
            tsOp.DeclareInput("effectName", type2)
            tsOp.DeclareInput("buffType", tsType55)
            tsOp.DeclareInput("rounds", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Remove Status Effect from Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.RemoveStatusEffect))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("effectName", type2)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Base Attribute", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorBaseAttribute))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("amount", tsType)
            tsOp.DeclareInput("stat", tsType30)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Base Skill", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorBaseSkill))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("amount", tsType)
            tsOp.DeclareInput("stat", tsType31)
            tsOp = env.DeclareOp("EffectFunctions", "Set Actor Base Specialization", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetActorBaseSpecialization))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("amount", tsType)
            tsOp.DeclareInput("stat", tsType32)
            tsOp = env.DeclareOp("EffectFunctions", "Add Actor Karma", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AddActorKarma))
            tsOp.DeclareInput("actors", tsType3)
            tsOp.DeclareInput("amount", tsType)
            tsOp = env.DeclareOp("EffectFunctions", "Start Conversation", type, New TsOp.EvalDelegate(AddressOf Shadowrun.StartConversation))
            tsOp.DeclareInput("conversationName", tsType35)
            tsOp.DeclareInput("target", tsType2)
            tsOp.DeclareInput("turnToFace", tsType26)
            tsOp = env.DeclareOp("EffectFunctions", "Start Conversation Between Actors", type, New TsOp.EvalDelegate(AddressOf Shadowrun.StartConversationBetweenActors))
            tsOp.DeclareInput("conversationName", tsType35)
            tsOp.DeclareInput("player", tsType2)
            tsOp.DeclareInput("target", tsType2)
            tsOp.DeclareInput("turnToFace", tsType26)
            tsOp = env.DeclareOp("EffectFunctions", "Assign Conversation to Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.AssignConversationToActor))
            tsOp.DeclareInput("conversationName", tsType35)
            tsOp.DeclareInput("player", tsType2)
            tsOp.DeclareInput("withwithout", tsType26)
            tsOp.DeclareInput("enabled", tsType16)
            tsOp = env.DeclareOp("EffectFunctions", "End Current Actor Turn", type, New TsOp.EvalDelegate(AddressOf Shadowrun.EndCurrentActorTurn))
            tsOp = env.DeclareOp("EffectFunctions", "End Current Team Round", type, New TsOp.EvalDelegate(AddressOf Shadowrun.EndCurrentTeamRound))
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Manual Turn Mode", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetManualTurnMode))
            tsOp.DeclareInput("enable", tsType16)
            tsOp = env.DeclareOp("EffectFunctions", "Enable/Disable Team's Turn", type, New TsOp.EvalDelegate(AddressOf Shadowrun.EnableDisableTeamTurn))
            tsOp.DeclareInput("team", tsType36)
            tsOp.DeclareInput("enable", tsType16)
            tsOp.DeclareInput("dimension", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Suspend Team's Turn", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SuspendTeamTurn))
            tsOp.DeclareInput("team", tsType36)
            tsOp.DeclareInput("rounds", tsType)
            tsOp.DeclareInput("dimension", tsType58)
            tsOp = env.DeclareOp("EffectFunctions", "Play Sound", type, New TsOp.EvalDelegate(AddressOf Shadowrun.PlaySound))
            tsOp.DeclareInput("soundName", tsType52)
            tsOp.DeclareInput("volume", type1)
            tsOp.DeclareInput("looping", tsType1)
            tsOp = env.DeclareOp("EffectFunctions", "Play Music", type, New TsOp.EvalDelegate(AddressOf Shadowrun.PlayMusic))
            tsOp.DeclareInput("musicName", tsType53)
            tsOp.DeclareInput("volume", type1)
            tsOp.DeclareInput("looping", tsType1)
            tsOp = env.DeclareOp("EffectFunctions", "Stop Sound", type, New TsOp.EvalDelegate(AddressOf Shadowrun.StopSound))
            tsOp.DeclareInput("soundName", tsType52)
            tsOp = env.DeclareOp("EffectFunctions", "Stop Music", type, New TsOp.EvalDelegate(AddressOf Shadowrun.StopMusic))
            tsOp = env.DeclareOp("EffectFunctions", "Open Character Creation Screen", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenCharacterCreationScreen))
            tsOp = env.DeclareOp("EffectFunctions", "Open Hiring Screen", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenHiringScreen))
            tsOp = env.DeclareOp("EffectFunctions", "Open Hiring Screen and Open Scene", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenHiringScreenAndOpenScene))
            tsOp.DeclareInput("sceneName", type2)
            tsOp.DeclareInput("confirmationText", type2)
            tsOp = env.DeclareOp("EffectFunctions", "Open Equip Screen", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenEquipScreen))
            tsOp = env.DeclareOp("EffectFunctions", "Open Store Screen From Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenStoreScreen))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Open Cyberware Screen From Actor", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenCyberwareScreen))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("EffectFunctions", "Save Game", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenSaveScreen))
            tsOp.DeclareInput("manualSaveType", tsType56)
            tsOp.DeclareInput("majorSaveType", tsType57)
            tsOp = env.DeclareOp("EffectFunctions", "Load Game", type, New TsOp.EvalDelegate(AddressOf Shadowrun.OpenLoadScreen))
            tsOp = env.DeclareOp("EffectFunctions", "Set Ambient Light Color", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetAmbientLightColor))
            tsOp.DeclareInput("r", type1)
            tsOp.DeclareInput("g", type1)
            tsOp.DeclareInput("b", type1)
            tsOp.DeclareInput("a", type1)
            tsOp.DeclareInput("seconds", type1)
            tsOp.DeclareInput("region", tsType11)
            tsOp = env.DeclareOp("EffectFunctions", "Set Directional Light Color", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetDirectionalLightColor))
            tsOp.DeclareInput("r", type1)
            tsOp.DeclareInput("g", type1)
            tsOp.DeclareInput("b", type1)
            tsOp.DeclareInput("a", type1)
            tsOp.DeclareInput("x", type1)
            tsOp.DeclareInput("y", type1)
            tsOp.DeclareInput("z", type1)
            tsOp.DeclareInput("seconds", type1)
            tsOp.DeclareInput("region", tsType11)
            tsOp = env.DeclareOp("EffectFunctions", "Set Environmental Effect Amount", type, New TsOp.EvalDelegate(AddressOf Shadowrun.SetEnvironmentEffectAmount))
            tsOp.DeclareInput("fxName", type2)
            tsOp.DeclareInput("amount", tsType)
            tsOp = env.DeclareOp("DataFunctions", "Current General Round", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetCurrentGeneralRound))
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("DataFunctions", "Current Battle Round", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetCurrentBattleRound))
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("DataFunctions", "Active Alarm Count", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActiveAlarmCount))
            tsOp = env.DeclareOp("DataFunctions", "Trigger Execution Count", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggerExecutionCount))
            tsOp.DeclareInput("triggerVal", tsType5)
            tsOp = env.DeclareOp("DataFunctions", "Get Region Enabled", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetRegionEnabled))
            tsOp.DeclareInput("regionName", tsType10)
            tsOp = env.DeclareOp("DataFunctions", "Prop Can Be Interacted With", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPropInteractionEnabled))
            tsOp.DeclareInput("object", tsType28)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("DataFunctions", "Get Percentage of Team Living or Dead", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTeamLivingPercentage))
            tsOp.DeclareInput("team", tsType36)
            tsOp.DeclareInput("deadoralive", tsType24)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor Health Percentage", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorHealthPercentage))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Actor is Player Controlled", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorPlayerControlled))
            tsOp.DeclareInput("actor", tsType3)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("DataFunctions", "Ammo for Weapon", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetAmmoForWeapon))
            tsOp.DeclareInput("baseorcurrent", tsType23)
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Ammo Percentage for Weapon", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetAmmoPercentage))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor Attribute", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorAttribute))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("baseorcurrent", tsType23)
            tsOp.DeclareInput("attribute", tsType30)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor Skill", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorSkill))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("baseorcurrent", tsType23)
            tsOp.DeclareInput("skill", tsType31)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor Specialization", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorSpecialization))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("baseorcurrent", tsType23)
            tsOp.DeclareInput("spec", tsType32)
            tsOp = env.DeclareOp("DataFunctions", "Get Random Actor on Team", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetRandomActorOnTeam))
            tsOp.DeclareInput("team", tsType36)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor's Persona", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorAvatar))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Get Persona's Host", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorHost))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Actor is a Persona", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.IsActorAvatar))
            tsOp.DeclareInput("Actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("DataFunctions", "Actor is Jacked in", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.IsActorDecking))
            tsOp.DeclareInput("Actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp = env.DeclareOp("DataFunctions", "Actor is Jacked in to Matrix Dimension", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.IsActorDeckingInDimension))
            tsOp.DeclareInput("Actor", tsType2)
            tsOp.DeclareInput("isisnot", tsType17)
            tsOp.DeclareInput("dimension", tsType58)
            tsOp = env.DeclareOp("DataFunctions", "Get Random Actor within Area", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetRandomActorInArea))
            tsOp.DeclareInput("area", tsType12)
            tsOp = env.DeclareOp("DataFunctions", "Get Random ThreatType of Actor within Area", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetRandomThreatTypeOfActorInArea))
            tsOp.DeclareInput("threat", tsType37)
            tsOp.DeclareInput("baseActor", tsType2)
            tsOp.DeclareInput("area", tsType12)
            tsOp = env.DeclareOp("DataFunctions", "Active Actor", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActiveActor))
            tsOp = env.DeclareOp("DataFunctions", "Last Attacker of Actor", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetLastAttackerOfActor))
            tsOp.DeclareInput("baseActor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor ID", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorID))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Get Actor From ID", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorFromID))
            tsOp.DeclareInput("id", type2)
            tsOp = env.DeclareOp("DataFunctions", "Triggering Actor", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringActor))
            tsOp = env.DeclareOp("DataFunctions", "Triggering Target Actor", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringTargetActor))
            tsOp = env.DeclareOp("DataFunctions", "Triggering Prop", tsType6, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringProp))
            tsOp = env.DeclareOp("DataFunctions", "Triggering Target Prop", tsType6, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringTargetProp))
            tsOp = env.DeclareOp("DataFunctions", "Last Created Prop", tsType6, New TsOp.EvalDelegate(AddressOf Shadowrun.GetLastCreatedProp))
            tsOp = env.DeclareOp("DataFunctions", "Last Created Actor", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetLastCreatedActor))
            tsOp = env.DeclareOp("DataFunctions", "Last Created Persona", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetLastCreatedAvatar))
            tsOp = env.DeclareOp("DataFunctions", "Actor's Current Target", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorCurrentTarget))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Player Team", tsType36, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPlayerTeam))
            tsOp = env.DeclareOp("DataFunctions", "Active Team", tsType36, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActiveTeam))
            tsOp = env.DeclareOp("DataFunctions", "Team of Actor", tsType36, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTeamOfActor))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Triggering Region", tsType10, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTriggeringRegion))
            tsOp = env.DeclareOp("DataFunctions", "Current Location of Actor", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.GetLocationOfActor))
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Current Location of Prop", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.GetLocationOfProp))
            tsOp.DeclareInput("prop", tsType6)
            tsOp = env.DeclareOp("DataFunctions", "Arithmetic (Point)", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.PointArithmetic))
            tsOp.DeclareInput("p0", tsType7)
            tsOp.DeclareInput("op", preset)
            tsOp.DeclareInput("p1", tsType7)
            tsOp = env.DeclareOp("DataFunctions", "Point Component (int)", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPointComponentInt))
            tsOp.DeclareInput("p0", tsType7)
            tsOp.DeclareInput("op", tsType49)
            tsOp = env.DeclareOp("DataFunctions", "Point Component (float)", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPointComponentFloat))
            tsOp.DeclareInput("p0", tsType7)
            tsOp.DeclareInput("op", tsType49)
            tsOp = env.DeclareOp("DataFunctions", "Specified Point (3D)", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.GetSpecifiedPoint3D))
            tsOp.DeclareInput("xVal", type1)
            tsOp.DeclareInput("yVal", type1)
            tsOp.DeclareInput("zVal", type1)
            tsOp = env.DeclareOp("DataFunctions", "Specified Point (2D)", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.GetSpecifiedPoint2D))
            tsOp.DeclareInput("xVal", type1)
            tsOp.DeclareInput("zVal", type1)
            tsOp = env.DeclareOp("DataFunctions", "Get Offset Point", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.GetOffsetPoint))
            tsOp.DeclareInput("basePoint", tsType7)
            tsOp.DeclareInput("offsetPoint", tsType7)
            tsOp = env.DeclareOp("DataFunctions", "Center of Region", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.GetCenterOfRegion))
            tsOp.DeclareInput("regionName", tsType10)
            tsOp = env.DeclareOp("DataFunctions", "Get Random Point Within Region", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.GetRandomPointInRegion))
            tsOp.DeclareInput("regionName", tsType10)
            tsOp = env.DeclareOp("DataFunctions", "Get Point Within Region Toward Direction", tsType7, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPointInRegionTowardDirection))
            tsOp.DeclareInput("regionName", tsType10)
            tsOp.DeclareInput("regionDirection", tsType51)
            tsOp = env.DeclareOp("DataFunctions", "Nearest Tagged Actor to Actor", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetNearestTaggedActorToActor))
            tsOp.DeclareInput("tagName", tsType39)
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Nearest Tagged Actor to Prop", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetNearestTaggedActorToProp))
            tsOp.DeclareInput("tagName", tsType39)
            tsOp.DeclareInput("prop", tsType6)
            tsOp = env.DeclareOp("DataFunctions", "Nearest Tagged Prop to Actor", tsType6, New TsOp.EvalDelegate(AddressOf Shadowrun.GetNearestTaggedPropToActor))
            tsOp.DeclareInput("tagName", tsType39)
            tsOp.DeclareInput("actor", tsType2)
            tsOp = env.DeclareOp("DataFunctions", "Nearest Tagged Prop to Prop", tsType6, New TsOp.EvalDelegate(AddressOf Shadowrun.GetNearestTaggedPropToProp))
            tsOp.DeclareInput("tagName", tsType39)
            tsOp.DeclareInput("prop", tsType6)
            tsOp = env.DeclareOp("DataFunctions", "Area: Entire Map", tsType12, New TsOp.EvalDelegate(AddressOf Shadowrun.GetAreaEntireMap))
            tsOp = env.DeclareOp("DataFunctions", "Area: Region", tsType12, New TsOp.EvalDelegate(AddressOf Shadowrun.GetAreaForRegion))
            tsOp.DeclareInput("region", tsType10)
            tsOp = env.DeclareOp("DataFunctions", "Area: Radius Arount Point", tsType12, New TsOp.EvalDelegate(AddressOf Shadowrun.GetAreaRadiusAroundPoint))
            tsOp.DeclareInput("radius", tsType)
            tsOp.DeclareInput("point", tsType7)
            tsOp = env.DeclareOp("DataFunctions", "All Actors", tsType3, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListAllActors))
            tsOp.DeclareInput("allorany", tsType45)
            tsOp = env.DeclareOp("DataFunctions", "All Actors With Tag", tsType3, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListAllActorsWithTag))
            tsOp.DeclareInput("tag", tsType39)
            tsOp.DeclareInput("allorany", tsType45)
            tsOp = env.DeclareOp("DataFunctions", "All Actors on Team", tsType3, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListAllActorsOnTeam))
            tsOp.DeclareInput("cam", tsType36)
            tsOp.DeclareInput("allorany", tsType45)
            tsOp.DeclareInput("dimName", tsType58)
            tsOp = env.DeclareOp("DataFunctions", "All Actors Within Area", tsType3, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListInArea))
            tsOp.DeclareInput("area", tsType12)
            tsOp.DeclareInput("allorany", tsType45)
            tsOp = env.DeclareOp("DataFunctions", "All ThreatTypes of Actor", tsType3, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListThreatTypes))
            tsOp.DeclareInput("threat", tsType37)
            tsOp.DeclareInput("baseActor", tsType2)
            tsOp.DeclareInput("allorany", tsType45)
            tsOp = env.DeclareOp("DataFunctions", "All ThreatTypes of Actor in Area", tsType3, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListThreatTypesInArea))
            tsOp.DeclareInput("threat", tsType37)
            tsOp.DeclareInput("baseActor", tsType2)
            tsOp.DeclareInput("area", tsType12)
            tsOp.DeclareInput("allorany", tsType45)
            tsOp = env.DeclareOp("DataFunctions", "Specific Actor", tsType3, New TsOp.EvalDelegate(AddressOf Shadowrun.GetActorListSpecificActor))
            tsOp.DeclareInput("actor", tsType2)
            tsOp.DeclareInput("allorany", tsType45)
            tsOp = env.DeclareOp("DataFunctions", "Tag From String", tsType39, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTagFromString))
            tsOp.DeclareInput("str", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Variable (int)", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetVariableInt))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Variable (float)", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetVariableFloat))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Variable (bool)", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetVariableBool))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Variable (string)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetVariableString))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Topic Variable (int)", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTopicVariableInt))
            tsOp.DeclareInput("topicName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Topic Variable (float)", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTopicVariableFloat))
            tsOp.DeclareInput("topicName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Topic Variable (bool)", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTopicVariableBool))
            tsOp.DeclareInput("topicName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Topic Variable (string)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetTopicVariableString))
            tsOp.DeclareInput("topicName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Story Variable (int)", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetStoryVariableInt))
            tsOp.DeclareInput("storyName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Story Variable (float)", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetStoryVariableFloat))
            tsOp.DeclareInput("storyName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Story Variable (bool)", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetStoryVariableBool))
            tsOp.DeclareInput("storyName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Story Variable (string)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetStoryVariableString))
            tsOp.DeclareInput("storyName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Previous Story Variable (int)", tsType61, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPreviousStoryVariableInt))
            tsOp.DeclareInput("storyName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Previous Story Variable (float)", tsType61, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPreviousStoryVariableFloat))
            tsOp.DeclareInput("storyName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Previous Story Variable (bool)", tsType61, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPreviousStoryVariableBool))
            tsOp.DeclareInput("storyName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Previous Story Variable (string)", tsType61, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPreviousStoryVariableString))
            tsOp.DeclareInput("storyName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Dependent Story Variable (int)", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetDependentStoryVariableInt))
            tsOp.DeclareInput("val", tsType61)
            tsOp.DeclareInput("default", tsType)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Dependent Story Variable (float)", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetDependentStoryVariableFloat))
            tsOp.DeclareInput("val", tsType61)
            tsOp.DeclareInput("default", type1)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Dependent Story Variable (bool)", tsType1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetDependentStoryVariableBool))
            tsOp.DeclareInput("val", tsType61)
            tsOp.DeclareInput("default", tsType1)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Dependent Story Variable (string)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetDependentStoryVariableString))
            tsOp.DeclareInput("val", tsType61)
            tsOp.DeclareInput("default", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Actor)", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemActor))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Actor Reference)", tsType4, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemActorReference))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Player)", tsType2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemPlayer))
            tsOp.DeclareInput("index", tsType)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Trigger)", tsType5, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemTrigger))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Prop)", tsType6, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemProp))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Scene)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemScene))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (SceneDimension)", tsType6, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemSceneDimension))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (InteractableObject)", tsType6, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemInteractableObject))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Region)", tsType10, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemRegion))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (CameraRegion)", tsType11, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemRegion))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (PatrolRoute)", tsType13, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemPatrolRoute))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Event)", tsType8, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemEvent))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Item)", tsType34, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemItem))
            tsOp.DeclareInput("itemName", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Conversation)", tsType35, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemConversation))
            tsOp.DeclareInput("itemName", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (SenseTagList)", tsType39, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemSenseTagList))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Goal)", tsType40, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemGoal))
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Sound)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemSound))
            tsOp.DeclareInput("bundleName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (Music)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemMusic))
            tsOp.DeclareInput("bundleName", type2)
            tsOp.DeclareInput("index", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Map Item (AnimationModifiers)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetMapItemAnimationModifiers))
            tsOp.DeclareInput("animName", type2)
            tsOp.DeclareInput("animMod", type2)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Preset Value (int)", tsType, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPresetValueInt))
            tsOp.DeclareInput("typeName", type2)
            tsOp.DeclareInput("index", tsType)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Preset Value (float)", type1, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPresetValueFloat))
            tsOp.DeclareInput("typeName", type2)
            tsOp.DeclareInput("index", tsType)
            tsOp = env.DeclareOp("ValueGetterFunctions", "Get Preset Value (string)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetPresetValueString))
            tsOp.DeclareInput("typeName", type2)
            tsOp.DeclareInput("index", tsType)
            tsOp = env.DeclareOp("DataFunctions", "Get User Entitlement (string)", type2, New TsOp.EvalDelegate(AddressOf Shadowrun.GetUserEntitlement))
            tsOp.DeclareInput("pref", tsType66)
        End Sub